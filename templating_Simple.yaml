openapi: 3.0.0
info:
  contact:
    email: help@biothings.io
    name: Chunlei Wu
    x-id: https://github.com/newgene
    x-role: responsible developer
  x-translator:
    infores-curie: "infores:mydisease-info"
    component: KP
    team:
      - Service Provider
    biolink-version: "2.2.3"
  description: Documentation of the MyDisease.info disease query web services.  Learn
    more about [mydisease.info](http://mydisease.info/)
  termsOfService: http://mydisease.info/terms
  title: MyDisease.info API
  version: '1.0'
servers:
- description: Production server
  url: http://mydisease.info/v1
tags:
- name: disease
- name: annotation
- name: query
- name: translator
- name: biothings
paths:
  "/disease":
    post:
      parameters:
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/format"
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ids:
                  description: 'multiple disease IDs separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: string
              required:
              - ids
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/Disease"
                type: array
          description: A list of matching disease objects
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: For a list of disease IDs, return the matching disease object
      tags:
      - disease
  "/disease/{diseaseid}":
    get:
      parameters:
      - description: Retrieve disease objects based on ID
        example: MONDO:0016575
        in: path
        name: diseaseid
        required: true
        schema:
          type: string
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Disease"
          description: A matching disease object
        '404':
          description: A response indicating an unknown disease ID
      summary: Retrieve disease objects based on ID
      tags:
      - disease
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/callback"
        in: query
        name: callback
      responses:
        '200':
          description: mydisease.info metadata object
      summary: Get metadata about the data available from mydisease.info
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/search"
        name: search
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/prefix"
        name: prefix
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          description: mydisease.info metadata fields object
      summary: Get metadata about the data fields available from a mydisease.info
        chem object
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - description: 'Query string.  The detailed query syntax can be found from our
          [docs](http://mydisease.info).  Examples: "cancer", "primary ciliary dyskinesia",
          "DOID:9562"'
        example: cancer
        in: query
        name: q
        required: true
        schema:
          type: string
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/facet_size"
        name: facet_size
      - "$ref": "#/components/parameters/sort"
        name: sort
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/facets"
        name: facets
      - "$ref": "#/components/parameters/size"
        name: size
      - "$ref": "#/components/parameters/from"
        name: from
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QueryResult"
          description: A query response with the "hits" property
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: Make disease queries and return matching disease hits. Supports JSONP
        and CORS as well.
      tags:
      - query
    post:
      parameters:
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/size"
        name: size
      - "$ref": "#/components/parameters/format"
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                q:
                  description: multiple query terms separated by comma (also "+" or
                    whitespace).  Does not support wildcard queries
                  type: string
                scopes:
                  description: 'a comma-separated list of fields as the search "scopes"
                    (fields to search through for query term). The available "fields"
                    that can be passed to the "scopes" parameter are listed in the
                    **/metadata/fields** endpoint.string Default: "scopes=_id".'
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QueryPOSTResult"
          description: Query response objects with the "hits" property
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: Make batch disease queries and return matching disease hits
      tags:
      - query
      x-bte-kgs-operations:
      - "$ref": "#/components/x-bte-kgs-operations/disease-gene-templated"
components:
  parameters:
    callback:
      description: 'you can pass a "callback" parameter to make a JSONP call. Type:
        string.'
      in: query
      name: callback
      schema:
        type: string
    dotfield:
      description: 'control the format of the returned disease object. If "true" or
        "1", all fields will be collapsed into a single level deep object (all nested
        objects will be a single level deep, using dotfield notation to signify the
        nested structure) Type: boolean. Default: false.'
      in: query
      name: dotfield
      schema:
        type: boolean
    email:
      description: If you are regular users of our services, we encourage you to provide
        us with an email, so that we can better track the usage or follow up with
        you.
      in: query
      name: email
      schema:
        type: string
    facet_size:
      description: 'the number of facet buckets to return in the response. Type: integer.
        Default: 10. Max: 1000.'
      in: query
      name: facet_size
      schema:
        type: integer
    facets:
      description: 'a comma-separated list of fields to return facets on.  In addition
        to query hits, the fields notated in "facets" will be aggregated by value
        and bucklet counts will be displayed in the "facets" field of the response
        object. Type: string (list). Default: None. Max: 1000.'
      in: query
      name: facets
      schema:
        type: string
    fields:
      description: 'a comma-separated list of fields (in dotfield notation) used to
        limit the fields returned from the matching disease hit(s). The supported
        field names can be found from any disease object or from the /metadata/fields
        endpoint. If "fields=all", all available fields will be returned. Type: string
        (list). Default: all. Max: 1000.'
      in: query
      name: fields
      schema:
        type: string
    format:
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      name: format
      schema:
        type: string
    from:
      description: 'the number of matching disease hits to skip, starting from 0.  This
        can be useful for paging in combination with the "size" parameter. Type: integer.
        Default: None.'
      in: query
      name: from
      schema:
        type: integer
    prefix:
      description: 'Pass a prefix string to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: prefix
      schema:
        type: string
    search:
      description: 'Pass a search term to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: search
      schema:
        type: string
    size:
      description: 'the maximum number of matching disease hits to return per batch.
        Type: integer. Default: 10.'
      in: query
      name: size
      schema:
        type: integer
    sort:
      description: 'the comma-separated list of fields to sort on. Prefix each with
        "-" for descending order, otherwise in ascending order. Default: sort by descending
        score.'
      in: query
      name: sort
      schema:
        type: string
  schemas:
    Disease:
      properties:
        _id:
          type: string
      required:
      - _id
      type: object
    ErrorResult:
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    QueryPOSTResult:
      items:
        allOf:
        - "$ref": "#/components/schemas/Disease"
        - properties:
            _score:
              format: float
              type: number
            query:
              type: string
          type: object
      type: array
    QueryResult:
      properties:
        hits:
          items:
            "$ref": "#/components/schemas/Disease"
          type: array
        max_score:
          format: float
          type: number
        took:
          type: integer
        total:
          type: integer
      type: object
    int64_or_array:
      oneOf:
      - items:
          format: int64
          type: integer
        type: array
      - format: int64
        type: integer
    string_or_array:
      oneOf:
      - items:
          type: string
        type: array
      - type: string
  x-bte-response-mapping:
    ## not including "name" field since BTE isn't ingesting / using it to annotate nodes...
    disease-gene:
      NCBIGene: disgenet.genes_related_to_disease.gene_id  ## no prefix
      pubmed: disgenet.genes_related_to_disease.pubmed     ## no prefix
      source: disgenet.genes_related_to_disease.source
      ## could remove "disgenet-" prefix from the key
      ##  if the key becomes the TRAPI attribute "original_attribute_name"
      disgenet-DPI: disgenet.genes_related_to_disease.DPI
      disgenet-DSI: disgenet.genes_related_to_disease.DSI
      disgenet-score: disgenet.genes_related_to_disease.score
  x-bte-kgs-operations:
    disease-gene-templated:
      - supportBatch: true
        ## is this flag used? may be useful to keep since some APIs can't accept multiple IDs and others can...
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UMLS
            semantic: Disease
        requestBody:
          body:
            ## inputs will likely not have prefix to remove...
            q: "{{ queryInputs | rmPrefix | joinSafe(',') }}"
            # q: "{inputs[0]}"
            scopes: disgenet.xrefs.umls
          header: application/x-www-form-urlencoded
        parameters:
          fields: disgenet.genes_related_to_disease
        outputs:
          - id: NCBIGene
            semantic: Gene
        predicate: related_to
        source: "infores:disgenet"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-gene"
#     Testing process suggestions: test with multiple IDs as input + 1 ID as input
#     - Post to MyDisease-thru-BTE specifically: 
#       http://localhost:3000/v1/smartapi/671b45c0301c8624abbd26ae78449ca2/query
#     - Multiple IDs: A query like this one:
# {
#     "message": {
#         "query_graph": {
#             "nodes": {
#                 "n0": {
#                     "ids":["UMLS:C0023264", "UMLS:C1328587"],
#                     "categories":["biolink:Disease"]
#                 },
#                 "n1": {
#                     "categories":["biolink:Gene"]
#                }
#             },
#             "edges": {
#                 "e1": {
#                     "subject": "n0",
#                     "object": "n1"
#                 }
#             }
#         }
#     }
# }
#       The response logs show that this was the sub-query sent to MyDisease.info:
#       - Notice that more UMLS IDs were found after ID resolution
#       - Notice how the format was correctly generated to send the multiple IDs in 1 query
#         {
#             "timestamp": "2021-09-09T22:18:22.012Z",
#             "level": "DEBUG",
#             "message": "call-apis: Succesfully made the following query: {\"url\":\"http://mydisease.info/v1/query\",\"params\":{\"fields\":\"disgenet.genes_related_to_disease\"},\"data\":\"q=C0023264,C0751267,C0751268,C1838951,C1850597,C1850598,C1850599,C1850600,C2931891,C1328587&scopes=disgenet.xrefs.umls\",\"method\":\"post\",\"timeout\":50000}",
#             "code": null
#         },
#     - 1 ID: A query like this one:
# {
#     "message": {
#         "query_graph": {
#             "nodes": {
#                 "n0": {
#                     "ids":["UMLS:C1328587"],
#                     "categories":["biolink:Disease"]
#                 },
#                 "n1": {
#                     "categories":["biolink:Gene"]
#                }
#             },
#             "edges": {
#                 "e1": {
#                     "subject": "n0",
#                     "object": "n1"
#                 }
#             }
#         }
#     }
# }
#       The response logs show that this was the sub-query sent to MyDisease.info:
#         {
#             "timestamp": "2021-09-09T22:22:18.492Z",
#             "level": "DEBUG",
#             "message": "call-apis: Succesfully made the following query: {\"url\":\"http://mydisease.info/v1/query\",\"params\":{\"fields\":\"disgenet.genes_related_to_disease\"},\"data\":\"q=C1328587&scopes=disgenet.xrefs.umls\",\"method\":\"post\",\"timeout\":50000}",
#             "code": null
#         },


    ## version of the operation without templating
    # disease-gene:
    # - supportBatch: true
    #   inputSeparator: ","
    #   parameters:
    #     fields: disgenet.genes_related_to_disease
    #   requestBody:
    #     body:
    #       q: "{inputs[0]}"  ## no prefix
    #       ## example: put C0023264 here (Leigh Disease).
    #       ##   should get NCBIGene:4694 (NDUFA1) in response
    #       scopes: disgenet.xrefs.umls
    #     header: application/x-www-form-urlencoded
    #   inputs:
    #   - id: UMLS
    #     semantic: Disease
    #   outputs:
    #   - id: NCBIGene
    #     semantic: Gene
    #   predicate: related_to
    #   source: "infores:disgenet"
    #   response_mapping:
    #     "$ref": "#/components/x-bte-response-mapping/disease-gene"