## example: MyDisease.info yaml, disease -> gene operation (which uses disgenet)
## Kevin: object-oriented way is to put related things together. Can always unpack the objects later and parse to make
##         something a table w/ columns. 
## Kevin: make the way you treat value/response_field consistent among all the areas
## chunlei: was to try the $ notation. removed but maybe add back? 
## TODO: 2-3 schemas. One for this framework, one for output made using this framework, and (?) one for the mapping file. 
components:
  x-bte-kgs-associations:
    disease-gene1:
      query_info:
        supportBatch: true
        inputSeparator: ","
        parameters:
          fields: disgenet.genes_related_to_disease
        requestBody:
          body:     
            q: "{inputs[0]}"
            scopes: "mondo.xrefs.umls, disgenet.xrefs.umls"
          header: application/x-www-form-urlencoded
      inputs:  ## used by metaKG too
        - id: UMLS
          semantic: Disease
      outputs:    ## used by metaKG and parsing response too 
        - id: NCBIGene
          semantic: Gene  
          ## ?? use a flag (is_curie) to tell if it's a curie or not? 
          ## example of situation 2: take the value in response field. Use response_field_used key. 
          response_field_used: "disgenet.gene_related_to_disease.gene_id"
      ## organized association/edge properties for BTE
      what_the_relationship_is:  ## ?? rename 
      ## example of situation 1: constant values. use value key. 
        biolink_predicate: 
          value: related_to    ## same as TRAPI/biolink predicate slot
        relation_id: 
          value: "SIO:001403"        ## same as TRAPI/biolink relation slot
        relation_label: 
          value: "SIO:is_associated_with"
        nodes_conflated:  ## optional field, always static so doesn't use value/response_field_used/instructions keys. 
        ## DisGeNET disease-gene relationships conflate diseases/phenotypes and genes/gene-products      
        - original_type: Disease
          conflated_type: PhenotypicFeature
          where: DisGeNET
        - original_type: Gene
          conflated_type: GeneProduct
          where: DisGeNET   
      references: ## ?? rename to show that USERS WANT THIS, FRONT AND CENTER 
        publications:  
          pmid: 
            response_field_used: "disgenet.genes_related_to_disease.pubmed"  
        ## Example of Situation 3: needing to process/transform/map from value in response field
        ##   you can tell since there's an instructions key...
        websites:   ## this one has template/template_keys. 
          instructions: >-
            Create an array of website urls using the template. Create a separate url for each disease ID used as input.
            There should be one source and one gene_id in the JSON record. 
            Result is an edge property called websites, with the value as an array of website url strings. 
          template: "https://www.disgenet.org/browser/0/1/0/{input_disease}/geneid__{response_gene}-source__{response_source}/" 
          template_keys:  ## map the template fields above to response fields or to variables
            response_source: "disgenet.genes_related_to_disease.source"
            response_gene: "disgenet.genes_related_to_disease.gene_id"
            ## the UMLS Disease IDs used as input to the query, as an array of strings
            input_disease: "inputs[0]"
          bte_postprocess_code: ""  
          ## link to the github BTE file where we post process to build this
      ## Example of Situation 3: needing to process/transform/map from value in response field
      ##   you can tell since there's an instructions key...          
      provenance:  ## this one will likely always involve a mapping file
        instructions: >- 
          Map from source field value (a string) to the provenance model developed by CX describing 
          what knowledge sources were involved and what methods were used to create/aggregate the associations 
          (an array of objects).
          Result is an edge property called provenance, with the value as an array of objects. 
        ## want to watch: is there ever a case where we do use multiple response fields for this?
        response_field_used: "disgenet.genes_related_to_disease.source"
        ## build a schema for this? hmmmm...or just build a schema for the OUTPUT that uses this framework. 
        mapping_file: "draft6_disgenetDGGD_mappingfile.yaml"  
        ## can process this mapping_file to get source info for metaKG
        bte_postprocess_code: ""  
        ## link to the github BTE file where we post process to build this
      ## example of situation 2: take on value in response field for each record. use response_field_used 
      ##   but organize this way with its extra information 
      numeric_measures:            
      - name: "DisGeNET gene-disease association score"
        response_field_used: "disgenet.genes_related_to_disease.score"
        range:
          minExclusive: 0
          maxInclusive: 1
        numeric_direction_info:
          larger: more_evidence
        website_for_info: "https://www.disgenet.org/dbinfo#section31"
        ## units as an optional value here. none of these have units. 
      - name: "DisGeNET evidence index"
        response_field_used: "disgenet.genes_related_to_disease.EI"
        range:
          minExclusive: 0
          maxInclusive: 1
        numeric_direction_info:
          larger: more_consistent
        website_for_info: "https://www.disgenet.org/dbinfo#section36"
      - name: "DisGeNET disease specificity index"
        ontology_term: 'SIO:001351'
        response_field_used: "disgenet.genes_related_to_disease.DSI"
        range:
          minExclusive: 0
          maxInclusive: 1
        numeric_direction_info:
          larger: more_specific
        website_for_info: "https://www.disgenet.org/dbinfo#section33"
      - name: "DisGeNET disease pleiotropy index"
        ontology_term: 'SIO:001352'
        response_field_used: "disgenet.genes_related_to_disease.DPI"
        range:
          minExclusive: 0
          maxInclusive: 1
        numeric_direction_info:
          smaller: more_specific
        website_for_info: "https://www.disgenet.org/dbinfo#section34"
        ## no context/relevance info 
      ## JSON response fields that we didn't use at all: year first reported (YearInitial) and year last reported (YearFinal)