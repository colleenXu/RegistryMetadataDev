## example: MyDisease.info yaml, disease -> gene operation (which uses disgenet)
components:
  x-bte-kgs-associations:
    disease-gene1:
      ## HOW TO QUERY  
      supportBatch: true
      inputSeparator: ','
      parameters:
        fields: disgenet.genes_related_to_disease
      requestBody:
        body:     
          q: '{inputs[0]}'
          scopes: 'mondo.xrefs.umls, disgenet.xrefs.umls'
        header: application/x-www-form-urlencoded
      inputs:  ## used by metaKG too
        - id: UMLS
          semantic: Disease
      outputs:    ## used by metaKG and parsing response too 
        - id: NCBIGene
          semantic: Gene     
          response_field: disgenet.gene_related_to_disease.gene_id
      ## HOW TO PARSE THE RESPONSE: 
      ##  organizes the fields into the big 4+publications/website_parsing (maybe other)
      ##  gives info on how to parse them and name them as edge properties...
      bte_association_parsing:
        ## what is the relationship
        - predicate: 
            needs_
        - relation_id:
        - relation_label:
        - DisGeNET_SourceKey: 
        
        
  SEE SCREENSHOT FOR HAVING A MAPPING FOR RESPONSE PARSING STUFF
  THEN A SET OF PREDIATES/PROVENANCE/NUMERICMEASURES WHATEVER SET TO THOSE KEYS
  
        
        bte_predicates:
          ## in some cases, we do need post-processing to map the non-biolink predicates to biolink...
          ## here, we don't need post-processing. We also don't need to map to a response field...
          ## so the values are STATIC and the metaKG can reference these directly
          biolink:
          ## 3 situations: static (set here), dynamic, or needs post-processing/mapping
            static_or_dynamic: dynamic
            needs_post_processing: true
            response_field_needed: "relation.id" 
            mapping_file: ""
            instructions: 
          id:
            static_or_dynamic: dynamic
            needs_post_processing: false
            response_field: "relation.id"
          label:
            static_or_dynamic: dynamic
            needs_post_processing: false
            response_field: "relation.label"
        ## where the relationship comes from / how and when was it made
        ## this groups the fields related to provenance and gives basic info on how to set up these columns
        bte_provenance_related:  
          "DisGeNET_SourceKey":
             response_field: disgenet.genes_related_to_disease.source
             expected_type: "string_represents_list"
             expected_format: 
               delimiter: ","
        - name: DisGeNET_YearInitialReported
          response_field: disgenet.genes_related_to_disease.YearInitial
          expected_type: number
          expected_format: date-year
        - name: DisGeNET_YearLastReported
          response_field: disgenet.genes_related_to_disease.YearFinal
          expected_type: number
          expected_format: date-year             
        bte_publications:   ## users consider this REQUIRED evidence
        ## response field usually maps to my kgs_reference model...I just add this key to 
        ##    say what kind of identifier is being used
          needs_post_processing: false
          pmid: disgenet.genes_related_to_disease.pubmed
        bte_website_parsing:   ## users consider this REQUIRED evidence: use info below to generate the urls
        ## usually, response fields don't include this...if they include it, maybe they can use bte_websites instead
          response_fields_used: 
           template: "https://www.disgenet.org/browser/0/1/0/{input_disease}/geneid__{response_gene}-source__{response_source}/" 
           template_keys:
             response_source: disgenet.genes_related_to_disease.source
             response_gene: disgenet.genes_related_to_disease.gene_id
             input_disease: "inputs[0]"  ## the UMLS Disease IDs used as input to the query, as an array of strings
           ## you have to iterate through this list 
           parsing_code_example: ""  ## MAKE THIS
        ## numeric measures
        bte_numeric_measures:
        - name: DisGeNET_AssociationScore
          response_field: disgenet.genes_related_to_disease.score
          expected_type: number
          expected_format: float
        - name: DisGeNET_EvidenceIndex
          response_field: disgenet.genes_related_to_disease.EI
          expected_type: number
          expected_format: float
        - name: DisGeNET_Gene-DiseaseSpecificity
          response_field: disgenet.genes_related_to_disease.DSI
          expected_type: number
          expected_format: float
        - name: DisGeNET_Gene-DiseaseClassSpecificity
          response_field: disgenet.genes_related_to_disease.DPI
          expected_type: number
          expected_format: float       
        ## no bte_category_measures for associations from this resource
        ## no bte_context_relevance for this resource...DisGeNET aggregates and makes a database of gene-disease, variant-disease, and disease-disease associations.             
      ## SEPARATE INFO FOR REASONING
      ## assuming this always involves some amount of custom post-processing for the operation's data...
      reasoning_support:
        nodes_conflated:
        ## DisGeNET disease-gene relationships conflate diseases/phenotypes and genes/gene-products      
        - original_type: Disease
          conflated_type: PhenotypicFeature
          where: DisGeNET
        - original_type: Gene
          conflated_type: GeneProduct
          where: DisGeNET           
        numeric_measure_info:
          numeric_measure_names: 
          - DisGeNET_AssociationScore
          - disgenet.genes_related_to_disease.EI
          - genes_related_to_disease.DSI
          - genes_related_to_disease.DPI
          parsing_description: >-
            post-processing can be done to map each response field (not the value, the field itself) to a 
            numeric-measure-info model developed by CX. It provides information on what the measure value means
            in the context of this association, including what a direction means (like a larger or smaller number)  
            the expected range of values, and where to go to find out how this measure was generated (like a website
            or a publication). If possible, the measure is also mapped to an ontology term. 
          info_file: ""  ## MAKE THIS  
        provenance_info:   
          response_fields_used: 
          - DisGeNET_SourceKey
          parsing_description: >-
            post-processing can be done to map from the source value for each association to a 
            provenance model developed by CX describing what knowledge sources were involved and 
            their methods of creating/aggregating the associations
          info_file: ""  ## MAKE THIS
      ## SEPARATE INFO FOR METAKG
      metakg_support:
        summary_predicates:
          ## perhaps the $ref avoid having to change code here whenever it changes above...
          biolink: "related_to"
            "$ref":"#/components/x-bte-kgs-associations/disease-gene1/bte_association_parsing/bte_predicates/biolink/value"
          id_list: 
          
          ## list since maybe sometimes multiple outside relations were mapped to one biolink term
          - "$ref":"#/components/x-bte-kgs-associations/disease-gene1/bte_association_parsing/bte_predicates/id/value"
          label_list:   ## list since maybe sometimes multiple outside relations were mapped to one biolink term
          - "$ref":"#/components/x-bte-kgs-associations/disease-gene1/bte_association_parsing/bte_predicates/label/value"
        summary_sources:
        ## list of the knowledge sources and some querable info. For more, see the reasoning_support/provenance_information and its linkout file 
        - name: "MyDisease.info API"
          version: "2020-10-26"
          version_type: "date_last_updated"
        - name: DisGeNET
          version: "7.0"
          version_type: "version_number"
        - name: GeneRIF
          ## trying to get these dates parsed as simple strings          
          version: "2009-03-31"
          version_type: "date_of_data"   
          ## tag for specific subset used
          specific_subset: human
        - name: MEDLINE_abstracts
          ## not sure how to describe this for parsing          
          version: "1970-01_to_2019-12"
          version_type: "date-range_in_year-month"
        - name: HPO_annotations
          version: unknown
          version_type: unknown
        - name: UniProt
          version: unknown
          version_type: unknown  
          specific_subset: human
        - name: Cancer_Genome_Interpreter
          version: unknown
          version_type: unknown
        - name: ClinVar
          version: unknown
          version_type: unknown
        - name: NHGRI-EBI_GWAS_Catalog
          version: unknown
          version_type: unknown
        - name: GWASdb
          version: unknown
          version_type: unknown
        - name: MGD
          version: unknown
          version_type: unknown
        - name: RGD
          version: unknown
          version_type: unknown
        - name: CTD
          version: unknown
          version_type: unknown
          specific_subset: "human,mouse,rat"
        - name: ClinGen
          version: unknown
          version_type: unknown          
        - name: Genomics_England_PanelApp
          version: unknown
          version_type: unknown              
        - name: PsyGeNET
          version: unknown
          version_type: unknown    
        - name: Orphanet
          version: unknown
          version_type: unknown     
        numeric_measures_present: true
        category_measures_present: false
        context_relevance_specific: false
        ## if this was true, we would probably add a field to list/summarize the context/relevance involved in some way...