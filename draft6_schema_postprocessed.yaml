## follows JSON schema, has "$ref" that need to be expanded in use. 
## note: currently has ALL the provenance and measure-related info 

title: Schema for association made using registry x-bte-association-retrieval
$schema: 'http://json-schema.org/draft-07/schema#'  ## change to a newer draft?
type: object
description: >-
  Describes the edge properties of an association/edge between biomedical 
  entities, retrieved using x-bte-association-retrieval metadata and a 
  knowledge-provider (KP) API in the Translator ecosystem. This assumes
  that the metadata was used to process the API/JSON response and generate 
  a knowledge-graph edge with edge properties. 
## schema corresponds somewhat to oneAssociationRetrievalObj in
##   x-bte-association-retrieval schema
required:
- predicateInfo
- provenance
## strongly recommended: references
## use if needed: numericMeasures, categoryMeasures, contextRelevance
##   note that each measure has a value field to put the actual value
additionalProperties: False
properties:
  ## WHAT the relationship is                    
  predicateInfo:
  ## remember the processing has already been done 
    type: object
    required:
    - biolink
    additionalProperties: false
    properties: 
      biolink: 
        description: >-
          Biolink relation that best describes the association. Similar to 
          the predicate field in a TRAPI (Q)Edge.         
        type: string
      id:
        description: >-
          Relation (OWL ObjectProperty) that best describes the association. 
          Formatted as a CURIE with prefix:ID. May be assigned by Translator
          team member or may be in the original information. Similar to the 
          relation field in a TRAPI (Q)Edge.    
        type: string
      label:
        description: Human-readable label for id field above. 
        type: string
      nodesConflated: 
        description: >-
          Array of objects (Python-list-of-dict-like). Used when 
          the associations conflate the Biolink entity classes/types 
          of the entities involved. For example, gene-disease associations
          often involve conflation of a gene with its altered gene product. 
        type: array
        items:
          $ref: '#/definitions/conflatedNode'    
  references:   ## IMPORTANT: users use this as evidence 
    $ref: '#/definitions/referenceObj' 
  ## WHERE the association and its related info come from, and HOW   
  provenance:    
    description:
      Groups together provenance related to this association.
    type: object
    properties:
      associationRetrieval:    
        description: >-
          Array of objects (Python-list-of-dict-like), gives info about 
          the sources and how the specific association was made.      
        type: array
        items:
          $ref: '#/definitions/oneProvenanceUnit'  
  ## MEASURES give INFO about this association and can be EVIDENCE for it                      
  numericMeasures:
  ## change to an array of name of measure -> value of measure
  ## then extra info on measure is in registry file? 
    description: >-
      Array of objects (Python-list-of-dict-like), gives info about 
      the measure and what response field to use to retrieve it. 
    type: array
    items:
      $ref: '#/definitions/oneNumericMeasure'      
  categoryMeasures:
  ## change to an array of name of measure -> value of measure
  ## then extra info on measure is in registry file? 
    description: >-
      Array of objects (Python-list-of-dict-like), gives info about 
      the measure and what response field to use to retrieve it. 
    type: array
    items:
      $ref: '#/definitions/oneCategoryMeasure'      
  ## WHERE and WHEN is this information valid/relevant
  contextRelevance:
    description: >-
      Groups together context/relevance related to this specific association. 
      Context/relevance is information that restricts the use or 
      interpretation of this association. 
      This is sometimes necessary for querying or for knowing when the 
      retrieved association is relevant to the problem being addressed. 
    type: object
    properties:
      associationRetrieval:   
        $ref: '#/definitions/contextObj'  
################################################################################      
definitions:
  stringOrArrayOfStrings:
    oneOf:
    - type: array
      items:
        type: string
    - type: string
  conflatedNode:
    type: object
    required:
    - original
    - conflated  
    properties:
      original:
        description: >-
          The current Biolink entity class (aka the node type) connected to this
          edge, which is being conflated with another Biolink entity class.
        type: string
      conflated:
        description: >-
          The Biolink entity class (aka the node type) that the association is
          rooted in from a biological point-of-view. For example, a gene-disease
          association may really be based on altered gene products and their
          activities; the original_type would be Gene and the conflated_type
          would be GeneProduct.
        type: string
      where:
        description: >-
          Name of the source (API/knowledge-source) where this happened, in 
          display format (source way of capitalizing their name, with spaces).  
          Should match the name of a knowledge-source described in the provenance 
          associationRetrieval field.
        type: string  
  referenceObj:   ## IMPORTANT: users use this as evidence 
    description: >- 
      Used to provide publications and website URLs for users who want to learn 
      more about an association, knowledge-source, measure, context/relevance, etc. 
    type: object
    additionalProperties: False
    properties:
      publications:
        type: object
        additionalProperties: False
        patternProperties:
        ## keys are ID namespace like pmid, pmc, doi, biorixv, medrxiv...
        ## assuming the values come from the response            
          .:
            $ref: '#/definitions/stringOrArrayOfStrings'  
      websites:
        $ref: '#/definitions/stringOrArrayOfStrings'         
## oneNumericMeasure and oneCategoryMeasure build on generalMeasure schema
  generalMeasure:
    type: object
    required:
    - name
    ## DO NOT SET additionalProperties to False, since other schemas build on this 
    properties:
      name:
        description: >-
          Name of the measure (include the name of the resource that calculated it). 
          In display format (source way of capitalizing the names, with spaces).  
        type: string
      ontologyTerm:
        description: >-
          Term from an ontology (ideally an OWL Class) that corresponds with
          this measure. Format is prefix:ID. 
        type: string
      missingValueMeaning:
        description: >-
          Short free-text, explaining what a missing/NULL/NA value for this 
          measure, for a specifc association/edge would mean. The assumption is 
          that only some associations/edges have a missing value. 
        type: string
      measureReferences:
      ## put the publications/websites for more info here
        $ref: '#/definitions/referenceObj'     
  oneNumericMeasure:
#     Numeric measures have additional required info, like range and the 
#     meaning of directions. Value is required to be a number. 
##    Units may also be specified. 
    allOf:
    - $ref: '#/definitions/generalMeasure'      
    - type: object
      required:
      - value   ## put the actual value here
      - range
      - directionMeaning
      ## don't set additionalProperties to False, will mess with allOf validation 
      properties:
        value:
          type: number
        range:
          ## do not set a range if a measure can take on any value from 
          ## negative-infinity to positive-infinity
          description: >-
            Python-dict-like. Should define an expected lower and/or upper 
            bound for values (minimum and maximum). Inclusive means the range 
            includes the boundary number, exclusive means the range does not. 
            If the actual lower-bound of the value is negative-infinity and/or
            the actual upper bound of the value is positive-infinity, do not
            set a bound. 
          type: object
          not:  ## used to make 2 mins or 2 maxs not allowed
          ## means that instance is invalid if...
            anyOf:
            - type: object
              required: ## both mins are present
              - minExclusive
              - minInclusive 
            - type: object
              required: ## both maxs are present
              - maxExclusive
              - maxInclusive 
          additionalProperties: False
          properties:            
            minExclusive: 
              type: number
            maxExclusive:
              type: number
            minInclusive:
              type: number
            maxInclusive:
              type: number
        directionMeaning:
          description: >-
            Object (Python-dictionary-like). Each key specifies a direction 
            (larger, closer_to_zero, more_negative, etc.). Each value specifies
            what the direction means (more_specific, more_evidence, 
            more_confident, more_consistent, more_probable, etc.). One may want to 
            explain multiple directions (like when a value means something 
            different when closer to 0, closer to the upper bound, and closer to 
            the lower bound). 
          type: object
          additionalProperties: False
          patternProperties:
            .:
              type: string                    
        units: 
        ## assuming this is the same for all measure values...
          description: >-
            Units for the measure values. 
          type: string   
  oneCategoryMeasure:
#     Categorical measures have additional required info, like an enumeration of
#     the possible values. There may be an order to the category values. 
#     Value is required to be a string
    allOf:
    - $ref: '#/definitions/generalMeasure'
    - type: object
      required:
      - value  ## put actual value here
      - categories
      ## don't set additionalProperties to False, will mess with allOf validation 
      properties:
        value:
          type: string
        categories:
          description: >-
            List the possible values for the category, ordered if there is an
            order to the values. 
          type: array
          items:
            type: string
        directionMeaning:
          description: >-
            Object (Python-dict-like). The key is the way to read the categories 
            array above, forward or reverse. The value is what the direction means 
            (more_specific, more_evidence, more_confident, more_consistent, 
            more_probable, etc.). 
          type: object
          additionalProperties: False
          patternProperties:
            forward|reverse:
              type: string     
  ## CONTEXT DATA OBJECT
  contextObj:     
    description: >-
      Object (Python-dict-like). Keys specify the type of context. Values could 
      be static (not dependent on response), take on a specific value in the 
      API/JSON response, or tranformed from the value of a specific field in the 
      API/JSON response. Ideally, the values will draw from ontologies (CURIE 
      format) or will be short strings. 
      Context/relevance is information that restricts the use or 
      interpretation of this association. 
      This is sometimes necessary for querying or for knowing when the 
      retrieved association is relevant to the problem being addressed.     
    type: object
    additionalProperties: False
    patternProperties:
      ## cell line info counts as experimentalSpecific
      taxonSpecific|diseaseSpecific|cohortSpecific|experimentalSpecific:
        $ref: '#/definitions/stringOrArrayOfStrings'  
  oneProvenanceUnit:
    type: object
    required:
    - name
    - sourceType
    additionalProperties: False
    properties:
      name:
        description: >-
          Name of the knowledge-source/API/resource. In display format (source way of 
          capitalizing their name, with spaces). Include words like API or RDF at the
          end of the name if those access methods were used. 
        type: string
      sourceType:
        ## May eventually set as enum to require a set number of options                             
        description: >-
          Type of knowledge-source/API/resource. Current possible values include
          service, knowledgebase, publications, text, clinical_database. 
        type: string
      version:        
        description: >-
          Knowledge-source/API/resource version.
        type: string
      versionType:
        ## May eventually set as enum to require a set number of options                             
        description: >-
          There are different formats / ways of specifying what the version is. 
          Current possible values include date_last_updated, version_number, 
          data_from_this_date, latest_date_covered.
        type: string
      method:
        ## Ideally, very similar methods have the same values. The many 
        ##   possible options make it hard to make as an enum.        
        description: >-
          Keyword noting what the knowledge-source/API/resource did to
          build the association from data/knowledge. Current possible values 
          include ingest, NLP, manual_curation, shared_phenotype, shared_disease, 
          shared_variant, submission, orthology_mapping... 
        type: string
        ## manual_curation means people are trained to make these annotations 
        ##   (aka curators) and/or submissions are REVIEWED by curators before entering KB
        ## submission means people made these annotations but their work wasn't 
        ##   necessarily made or reviewed by curators 
      methodReferences:
      ## put the publications/websites that have more info on how annotations were made
      ##  can be what was used to set/write method, descriptiveInfo, sourceContext...
        $ref: '#/definitions/referenceObj'  
      descriptiveInfo:      
        description: >-
          Free-text description of what the source did to create the associations.
          Try to include enough detail that a reader would truly understand what
          happened. 
        type: string        
      sourceContext:
        ## used ONLY when every association retrieved from this API is restricted 
        ##   in how it should be used or interpreted. 
        $ref: '#/definitions/contextObj'