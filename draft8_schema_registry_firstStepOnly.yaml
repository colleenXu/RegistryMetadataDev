title: Schema for x-bte-association-retrieval operations
$schema: 'http://json-schema.org/draft-07/schema#'
type: object
description: >-
  Describes the x-bte-association-retrieval metadata extension within SmartAPI
  registry files. Knowledge-provider (KP) APIs in the Translator ecosystem
  provide associations/edges between biomedical entities. This extension
  includes 1) additional support for querying those APIs, 2) metadata for
  processing API responses, and 3) metadata to add information to the API
  responses
required:
  - components
properties:
  components:
    type: object
    properties:
      x-bte-association-retrieval:
        definition: >-
          Each key inside this object corresponds to one association-retrieval
          operation. An operation has input biomedical entities from one
          Biolink class, output biomedical entities from one Biolink entity
          class, and one unique set of metadata
        type: object
        minProperties: 1
        patternProperties:
          .:  ## usually named inputType-outputType-number
            $ref: '#/definitions/oneAssociationRetrievalObj'
definitions:
  oneAssociationRetrievalObj:
    type: object
    ## TO ADD?
    ## - fields to add TRAPI stuff (attribute_type stuff) to list stuff like numericMeasures, categoricalMeasures
    ## - notes on how to map this format (provenance, references, predicateInfo, context to TRAPI format with attribute_type stuff)?
    ## now: requiring the minimum. future: also require provenance
    required:
      - inputsAndQueryInfo
      - outputs
      - predicateInfo
    additionalProperties: False
    properties:
    ## now: this structure should lead to LESS querying
      inputsAndQueryInfo:
        description: >-
          Object (Python dict-like). Describes input biomedical entities
          (which must be from one Biolink class) and how to query the API
        type: object
        required:
          - semantic
          - idAndQuery
        additionalProperties: False
        properties:
          semantic:
            description: Biolink class for the biomedical entities in the query
            type: string
          ## logic should be OR when there are multiple idAndQuery elements
          idAndQuery:
            type: array
            minItems: 1
            items:
              type: object
              required:
                - id
                - queryInfo
              additionalProperties: False
              properties:
                id:
                  description: >-
                    Translator-compliant namespace prefix for the IDs of the
                    biomedical entities in the query
                  type: string  ## usually all-caps
                ## FIRST STEP: include (but this is new)
                ## future: metaKG can use this to decide whether to query
                restrictedTo:
                  description: >-
                    Array of the IDs that the API can handle. Use this ONLY
                    when there is a VERY LIMITED number of valid inputs. The
                    IDs should be in the format that the API accepts (prefixed
                    or not). The array can be incomplete (when the metadata
                    writer does not know all possible values)
                  type: array
                  minItems: 1
                  items:
                    type: string
                queryInfo:
                  description: >-
                    Contains info on the query (API call) for this operation.
                    OpenAPI /paths/operations may have specific fields (e.g.
                    parameters, responseBody), and these can be set here
                  type: object
                  minProperties: 1
                  ## FIRST STEP: may add to old x-bte parameter/fields so more is returned
                  ##      Since now we can handle that in the outputs, response-mapping
                  properties:
                    supportsBatch:
                      description: >-
                        If this field is absent, assume False (API does not
                        support batch querying)
                      type: boolean
                    inputSeparator:
                      type: string
                    path:
                      type: string
                    method:
                      type: string
                    ## FIRST STEP: note prefix if this API query needs it
                    ## future: processing notation in the input string? (like Django/Jinja)
                    parameters:
                      type: object
                    ## ?? a size parameter should always have a number value, rather than a string?
                    requestBody:
                      type: object
      outputs:
        description: >-
          Object (Python dict-like). Describes output biomedical entities
          (which must be from one Biolink class) and their corresponding API
          fields
        type: object
        required:
          - semantic
          - idAndFields
        additionalProperties: False
        properties:
          semantic:
            description: >-
              Biolink class for the biomedical entities in the API response
            type: string
          ## logic should be OR when there are multiple idAndQuery elements
          idAndFields:
            type: array
            minItems: 1
            items:
              type: object
              required:
                - id
                - idField
              additionalProperties: False
              ## FIRST STEP: using two response-field-mappings, one for ID and one for name
              ##   old x-bte was able to do this, so this has the option too
              properties:
                id:
                  description: >-
                    Translator-compliant namespace prefix for the IDs of the
                    biomedical entities in the API response
                  type: string  ## usually all-caps
                ## FIRST STEP: note if response fields have prefix/post-processing issues
                ##             (string -> list, find/replace, etc.)
                ## future: processing notation in the input string? (like Django/Jinja)
                idField:
                  description: >-
                    Dot-notation of the API field that corresponds to the IDs
                    of the output biomedical entities
                  type: string
                nameField:
                  description: >-
                    Dot-notation of the API field that corresponds to the names
                    of the output biomedical entities
                  type: string
      testExamples:
        description: >-
          Used for automated testing. Multiple elements when inputsAndQueryInfo or
          outputs have multiple elements to test that it is handled correctly
        type: array
        minItems: 1
        items:
          type: object
          required:
            - qInput
            - oneOutput
          properties:
            qInput:
              description: >-
                1 Translator-compliant curie for a biomedical entity, to use as input
              type: string
            oneOutput:
              description: >-
                1 Translator-compliant curie for a biomedical entity. This should be
                in the response
              type: string
      ## NOT FOR FIRST STEP: requiresPreProcessing, apiHasDeduction. requires additional curation
      predicateInfo:
        type: object
        required:
          - biolink
        additionalProperties: False
        properties:
          biolink:
            oneOf:
              ## FIRST STEP: only use this sub-schema, like old x-bte. DON'T DO more curation
              ##             remember to use one predicate from Biolink related_to hierarchy
              ##             format undercase, underscores, no prefix
              - type: string
              # future: can map to response field. expectedValues for metaKG,
              #         responseField prefix/post-processing notation like Django/Jinja
#               - $ref: '#/definitions/basicFromResponse'
          ## NOT FOR FIRST STEP: id (non-biolink predicate), label, negated.
          ##   id, label have same structure as biolink.
          ## future: curation to add id for as many operations as possible?
      references:
        description: >-
          Object (Python dict-like). Describes API fields that provide
          publications and webpages related to associations
        type: object
        additionalProperties: False
        minProperties: 1
        patternProperties:
        ## Kevin: this design means a field has one unambiguous name and ID namespace...
        ## @ add names here as they are encountered
          "^pmid$|^pmc$|^doi$|^biorixv$|^medrxiv$|^isbn$|^omim$|^orpha$|^websites$":
            type: object
            required:
              - responseField
            additionalProperties: False
            properties:
            ## FIRST STEP: note if response fields have prefix/post-processing issues
            ##             (string -> list, find/replace, etc.)
            ## future: processing notation in the input string?? (like Django/Jinja)
              responseField:
                description: >-
                  Dot-notation of the API field
                type: string
        ## future: have a websiteTemplate property that uses processing notation (like Django/Jinja) to
        ##         describe how to generate the KP-source's webpage for the association??
#         properties:
#           websiteTemplate:
#             type: string
      provenances:
      ## future:
      ## 1. discuss how to handle API fields that describe deeper source info. Maybe another property called fromKPSource (obj) -> names/methods keys that map to fields?
      ## 2. Are knowledgeProvider and kpSource info static? Or are they ever mapped to response?
      ##    The problem with direct mapping would be diff vocabs for methods, names between KPs
        description: >-
          Object (Python dict-like). Provides structured source info
          for associations returned by the operation (AKA where and how
          they were made)
        type: object
        required:
          - kpSource
        properties:
          ## future: knowledgeProvider would include info about the API not in SmartAPI fields
          ## FIRST STEP: this is like old x-bte source field. DON'T DO more curation
          ## future: curation for other properties, require sourceType / method? perhaps this info is static?
          kpSource:
            description: >-
              Object (Python dict-like). Describes the source of data/knowledge
              that the knowledge provider used
            type: object
            required:
              - name
            additionalProperties: False
            properties:
              name:
                description: Name of source
                type: string
              ## Record what I'm doing in FileONames
          internalDataSource:
          ## use for dynamic source info. Thinking each property below (name, method) would use basicFromResponse template
          ## FIRST STEP: note if response fields have prefix/post-processing issues
          ##             (string -> list, find/replace, etc.)
          ## future: processing notation in the input string?? (like Django/Jinja)
            description: >-
              Object (Python dict-like). Describes the source info provided in the data/knowledge
            type: object
            required:
              - name
            additionalProperties: False
            properties:
              name:
                type: object
                required:
                  - responseField
                additionalProperties: False
                properties:
                  responseField:
                    description: Dot-notation of the API field
                    type: string
      contexts:  ## will be optional
      ## currently using for dynamic context info.
      ## FIRST STEP: note if response fields have prefix/post-processing issues
      ##             (string -> list, find/replace, etc.)
      ## future: processing notation in the input string?? (like Django/Jinja)
      ## note: hard to treat like references, since not all things (cohort, tissue, cell line) may have an ID/curie...
      ## future: previously thought it would inherit from basicFromResponse. But there are decisions on whether there is only one field per key (context-type), whether to include ID namespace / semantic-type
        description: >-
          Object (Python dict-like). Context is information that restricts the
          use or interpretation of this association. It helps one know if the
          operation or associations retrieved are relevant to the question
          asked. The keys specify the type of context. The values should be
          from ontologies (prefixed IDs, curies) or keywords (short strings)
        type: object
        additionalProperties: False
        minProperties: 1
        patternProperties:
        ## @ add categories here as they are encountered
          taxonSpecific|diseaseSpecific|cohortSpecific|experimentalSpecific:
            type: object
            required:
              - responseField
            additionalProperties: False
            properties:
              responseField:
                description: Dot-notation of the API field
                type: string
      numericMeasures:
        description: >-
          Array of objects (Python list-of-dict-like). Describes API fields
          that provide a numeric value related to the association. Often from
          an analysis used to evaluate the association
        type: array
        minItems: 1
        items:
        ## FIRST STEP: only include name and responseField (required by generalMeasure).
        ##             DON'T DO more curation
        ## future: curation for other properties, require directionMeanings?
          allOf:
            - $ref: '#/definitions/generalMeasure'
            ## includes additional properties for numeric measures
      categoricalMeasures:
      ## @ many fields treat this as a list of keywords, not a categorical
      ##   variable from stats (with only one value per record). So definition
      ##   has been changed to accommodate this.
      ## @ Use singleValuesOnly flag to note stats categorical vars
        description: >-
          Array of objects (Python list-of-dict-like). Describes API fields
          that do not fit into other properties (predicateInfo, provenances,
          contexts) and provide one or more keyword (string) values related to
          the association
        type: array
        minItems: 1
        items:
        ## FIRST STEP: only include name and responseField (required by generalMeasure).
        ##             DON'T DO more curation
        ## future: curation for other properties,
        ##         require expectedValues? singleValuesOnly flag also important
          allOf:
            - $ref: '#/definitions/generalMeasure'
            ## includes additional properties for categorical measures
      otherProperties:
      ## where to put everything else in old x-bte response mapping.
      ## future: may include stuff like what was used to infer
      ##   associations via triangulation (e.g. variant for disease->gene),
      ##   text-mining info, clinical-data/exposures info
        description: >-
          Array of objects (Python list-of-dict-like). Describes other edge
          properties of interest and their corresponding API field
        type: array
        minItems: 1
        items:
          type: object
          required:
            - name
            - domainArea
            - responseField
          additionalProperties: False
          properties:
            name:
              description: >-
                Name of the property (include the name of the resource that it
                comes from)
              type: string
            domainArea:
            ## future: make enum
            ## values so far: description, alt_output_id
              description: >-
                Keyword for what domain area this property is specific to.
                Could have values like text_mining, gene_expression_data, etc.
              type: string
            ## future: responseField prefix/post-processing notation like Django/Jinja
            responseField:
              description: >-
                Dot-notation of the API field
              type: string
## this is 79 char long #######################################################
## for references from main oneAssociationRetrievalObj sub-schema
  ## assumes a measure's values are in one API field
  ## oneNumericMeasure and oneCategoricalMeasure build on generalMeasure
  generalMeasure:
    type: object
    required:
    - name
    - responseField
    ## don't set additionalProperties to False, will mess with allOf
    properties:
      name:
        description: >-
          Name of the measure (include the name of the resource that
          calculated it)
        ## !! Record what I'm using in FileONames
        type: string
      responseField:
        description: >-
          Dot-notation of the API field corresponding to the measure
        type: string