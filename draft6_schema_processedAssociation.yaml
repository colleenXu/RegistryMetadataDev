## notes for developers:
##  use this to validate association after BTE post-processing using the
##    registry file and any mapping files 
##  this schema has "$ref" that need to be expanded in use. 
##    Python has the library jsonrefs that can be used for this. 
##  from Andrew Su: for now, require less 
## this is 79 char long #######################################################

## CX notes:
## an ongoing issue: all the metadata for the operation in the registry file 
##   likely DOESN'T NEED TO HANG OFF every single association 
## I'll leave notes on what I decide to leave off and keep on

title: Schema for associations/edges after BTE post-processing
$schema: 'http://json-schema.org/draft-07/schema#'
type: object
description: >-
  Describes the edge properties of an association/edge between biomedical
  entities retrieved using a knowledge-provider (KP) API in the Translator
  ecosystem. This assumes that BTE processed the API/JSON-response using
  metadata from the x-bte-association-retrieval extension in the registry file
## schema corresponds to oneAssociationRetrievalObj in
##   x-bte-association-retrieval schema.
## however, there are differences in structure/type after post-processing
##   currently unnesting many values
required:
## don't need queryInfo, inputs, outputs since BTE uses this to automatically
##   handle the querying and some of the post-processing node resolution
- predicateInfo
## strongly recommended: provenance, references
## use if needed: numericMeasures, categoryMeasures, contextRelevance
additionalProperties: False
properties:
  predicateInfo:    ## need the specific predicates for this edge 
    type: object
    required:
    - biolink
    additionalProperties: false
    properties: 
      biolink: 
        description: >-
          Biolink predicate that best describes the association. Similar to
          the biolink/TRAPI predicate
        type: string
      id:
        description: >-
          Relation (OWL ObjectProperty) that best describes the association.
          Curie format (prefix:ID). Assigned by Translator team member or
          found in the original data. Similar to the biolink/TRAPI relation
        type: string
      label:
        description: Human-readable label for id field above
        type: string
      ## don't need nodesConflated? BTE could use it in the automatic querying
      ##   and post-processing node resolution. See the registry file and 
      ##   registry schema file for more thoughts 
  references:    ## need the specific references for this edge 
    $ref: '#/definitions/referenceObj' 
  provenance:   ## need the specific prov. for this edge 
  ## It's a lot to have on every edge but saving records by uri and then 
  ##   looking them up later may be harder. 
  ## maybe BTE can nest the association-retrieval provenance in a sub-field 
  ##   like this. Then the provenance edge property can also hold info for 
  ##   other operations that are done on this edge (like scoring)     
    description:
      Groups together provenance related to this association.
    type: object
    properties:
      associationRetrieval:    
        description: >-
          Array of objects (Python list-of-dict-like). Lists the sources and
          associated info (including how they create associations)
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/oneProvenanceUnit'
  ## need the specific measure values for this edge          
  ## It's a lot to have on every edge but saving records by uri and then 
  ##   looking them up later may be harder.  
  ## the registry file told BTE what JSON field to use (in the responseField),
  ##   then BTE inserts data from that field into a new sub-field (value) in
  ##   the metadata structure
  ## BTE can exclude the responseField sub-field from the association  
  numericMeasures:  
    description: >-
      Array of objects (Python list-of-dict-like). Gives measure info and
      which API/JSON-response field to retrieve it from
    type: array
    minItems: 1
    items:
      $ref: '#/definitions/oneNumericMeasure'      
  categoryMeasures:
    description: >-
      Array of objects (Python list-of-dict-like). Gives measure info and
      which API/JSON-response field to retrieve it from
    type: array
    minItems: 1
    items:
      $ref: '#/definitions/oneCategoryMeasure'
  contextRelevance:    ## need the specific context for this edge 
  ## I don't think other operations will add to this, so I left info like this
    $ref: '#/definitions/contextObj'  
## this is 79 char long #######################################################
definitions:
  referenceObj:  
    description: >- 
      Used to provide publications and website URLs for users to learn more
      about an association, knowledge-source, measure, context/relevance, etc
    type: object
    additionalProperties: False
    minProperties: 1
    ## only have a referenceObj if you're going to provide info...
    properties: 
      publications:
        type: object
        ## only have a publications if you're going to provide info...
        minProperties: 1
        patternProperties:
        ## keys are ID namespace, all-lowercase. 
        ## Examples: pmid, pmc, doi, biorixv, medrxiv
          .:            
            ## allows for numbers since IDs are often automatically 
            ##   parsed as numbers...  
            oneOf:  
            - type: array
              minItems: 1
              items:
                type: [string, number]
            - type: [string, number]
      websites:
      ## only allows strings or arrays of strings
        oneOf:
        - type: array
          minItems: 1
          items:
            type: string
        - type: string     
  oneProvenanceUnit:
    type: object
    required:
    - name
    - sourceType
    additionalProperties: False
    properties:
      name:
        description: >-
          Name of the source (KP API, knowledge-source, database, text
          corpus, etc)
        type: string
      sourceType:
        ## ?? set as enum (set options)                      
        description: >-
          Type of the source (KP API, knowledge-source, database, text
          corpus, etc). Current possible values include service,
          knowledgebase, publications, text, clinical_database
        type: string
      version:        
        description: >-
          Source version (KP API, knowledge-source, database, text corpus, etc)
        type: string
      versionType:
        ## ?? set as enum (set options)                      
        description: >-
          There are different formats for versioning. Current possible values
          include date_last_updated, version_number, data_from_this_date,
          latest_date_covered
        type: string
      method:
        ## Ideally, very similar methods have the same values. The many 
        ##   possible options make it hard to make as an enum. 
        ## Note that some sources won't have methods (like text corpus...)
        description: >-
          Keyword noting what the source did to create associations from data
          or knowledge. Current possible values include ingest, NLP,
          manual_curation, shared_phenotype, shared_disease, shared_variant,
          submission, orthology_mapping
        type: string
        ## manual_curation means people (aka curators) are trained to make 
        ##   these associations or the associations were REVIEWED by curators
        ## submission means people made the associations but their work wasn't 
        ##   necessarily made or reviewed by curators      
      sourceReferences:
      ## for publications/websites with info on how associations were made
      ## likely used to pick the sourceType/method/sourceContext and write
      ##   descriptiveInfo
        $ref: '#/definitions/referenceObj'  
      descriptiveInfo:      
        description: >-
          Long-text description of what the source did to create associations.
          Try to include enough detail that a reader would understand what
          happened
        type: string        
      sourceContext:
        ## used ONLY when every association retrieved from this operation
        ##   is restricted in how it should be used or interpreted. 
        $ref: '#/definitions/contextObj' 
## this is 79 char long #######################################################
## oneNumericMeasure and oneCategoryMeasure build on the generalMeasure schema
  generalMeasure:
    type: object
    required:
    - name  ## value will be set in the numeric/category measures
    ## don't set additionalProperties to False, will mess with allOf later
    properties:
      name:
        description: >-
          Name of the measure (include the name of the resource that
          calculated it)
        type: string
      ontologyTerm:
        description: >-
          Term from an ontology (ideally an OWL Class) that corresponds with
          this measure. Format is prefix:ID
        type: string
      missingValueMeaning:
        description: >-
          Short free-text explaining what a missing/NULL/NA value would mean
        type: string
      measureReferences:  
      ## put publications/websites with more info on the measure here
        $ref: '#/definitions/referenceObj'           
  oneNumericMeasure:
  ## includes additional requirements, like value (must be numeric), range,
  ##   and direction info. Units may also be specified. 
    allOf:
    - $ref: '#/definitions/generalMeasure'      
    - type: object
      required:
      - value
      - directionMeaning
      ## don't set additionalProperties to False, will mess with allOf
      properties:
        value:  ## replaces responseField, put the actual number here
          type: number
        range:
          ## do not set a range if a measure can take on any value 
          description: >-
            Object, Python dict-like. Defines an expected lower and/or upper
            bound for values (minimum and maximum). Inclusive means the range
            includes the boundary number; exclusive means the range does not.
            If the actual lower-bound is negative-infinity and/or the actual
            upper bound is positive-infinity, do not set a bound
          type: object
          not:  ## used to make 2 mins or 2 maxs not allowed
          ## means that instance is invalid if...
            anyOf:
            - type: object
              required: ## both mins are present
              - minExclusive
              - minInclusive 
            - type: object
              required: ## both maxs are present
              - maxExclusive
              - maxInclusive 
          additionalProperties: False
          minProperties: 1
          properties:            
            minExclusive: 
              type: number
            maxExclusive:
              type: number
            minInclusive:
              type: number
            maxInclusive:
              type: number
        directionMeaning:
          description: >-
            Object, Python dict-like. Each key is a direction (larger,
            closer_to_zero, more_negative, etc.). Each value is what the
            direction means (more_specific, more_evidence, more_confident,
            more_consistent, more_probable, etc.). A developer may want to
            explain multiple directions (e.g. when a value means something
            different when closer to 0 vs. closer to the upper bound vs.
            closer to the lower bound)
          type: object
          minProperties: 1
          patternProperties:
            .:
              type: string                    
        units: 
        ## assuming this is the same for all measure values...
          description: Units for the measure values
          type: string   
  oneCategoryMeasure:
  ## includes additional requirements, like value (must be string), 
  ##   categories (enumerates possible values) and direction info (if
  ##   the possible values are ordered)
    allOf:
    - $ref: '#/definitions/generalMeasure'
    - type: object
      required:
      - value
      - categories
      ## don't set additionalProperties to False, will mess with allOf
      properties:
        value:   ## replaces responseField, put the actual value here
          type: string
        categories:
          description: >-
            List of the possible values for the category, ordered if there
            is an order to the values
          type: array
          items:
            type: string
        directionMeaning:
          description: >-
            Object, Python dict-like. The key is the way to read the
            categories above, forward or reverse. The value is what the
            direction means (more_specific, more_evidence, more_confident,
            more_consistent, more_probable, etc)
          type: object
          additionalProperties: False
          minProperties: 1
          ## if you have a direction, provide info...
          patternProperties:
            forward|reverse:
              type: string
  ## CONTEXT DATA OBJECT
  contextObj:     
    description: >-
      Object, Python dict-like. Keys specify the type of context. Values
      depend on where the information comes from. After post-processing, the
      context should be ontology terms (curies) or short-strings.
      Context/relevance is information that restricts the use or
      interpretation of this association. This lets a developer know if the
      operation or the associations retrieved are relevant to the question
      being asked
    type: object
    additionalProperties: False
    minProperties: 1
    ## if contextObj is present, require it to have some info inside
    patternProperties:
      ## cell line info counts as experimentalSpecific
      taxonSpecific|diseaseSpecific|cohortSpecific|experimentalSpecific:
        oneOf:
        - type: array
          items:
            type: string
        - type: string