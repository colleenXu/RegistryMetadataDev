## notes for developers:
## - use this to validate registry files
## - this schema has "$ref" that need to be expanded in use.
##   Python has the library jsonref that can be used for this. 
## - objects must include "type:object" and "properties". If removed, the
##   validation will not work correctly. 
## - x-bte-association-retrieval can be a separate metadata extension for now,
##   so code dependent on x-bte-kgs-operations (current) doesn't break 
## - from Andrew Su: for now, require less.

## issues / Q for Kevin marked @ or !!
## - what to do when prefix for input/output/data (references, biolink) doesn't match the key/prefix used in Translator? Currently commenting if that happens - schema already tells you if there requires/contains a prefix and what the Translator prefix is
## - consider adding back a key ("when the record doesn't have this key inside...") -> use this value to for it (previously the "default" key). use for predicateInfo / references / provenance / context / categoricalMeasures?

## notes:
## - schema cannot enforce/check format for predicates from responseFields. However, during post-processing or later, we could string format (undercase, spaces -> underscore) and make curies
## - if there are reference fields with multiple ID namespaces for an API operation, currently it seems we have to pre-process responses to create separate fields for each ID namespace...
## - assuming only one delimiter per response field thing...
## - currently not including an array/enum of what a missing/NULL/NA value looks like (ex: it could be an empty string/array/object)

title: Schema for objects within x-bte-association-retrieval
$schema: 'http://json-schema.org/draft-07/schema#'
type: object
description: >-
  Describes the x-bte-association-retrieval metadata extension within SmartAPI
  registry files. Knowledge-provider (KP) APIs in the Translator ecosystem
  provide associations/edges between biomedical entities. This extension
  includes 1) additional support for querying those APIs, 2) metadata for
  processing API responses, and 3) metadata to add required fields to the API
  responses
required:
  - components
properties:
  components:
    type: object
    properties:
      x-bte-association-retrieval:
        definition: >-
          Each key inside this object corresponds to one association-retrieval
          operation, which consists of one Biolink entity class and a unique
          set of metadata
        type: object     
        minProperties: 1
        patternProperties:
          .:  ## usually named inputType-outputType-number
            $ref: '#/definitions/oneAssociationRetrievalObj'       
definitions:
  oneAssociationRetrievalObj:
    type: object
    required:
      - inputsAndQueryInfo
      - outputs
      - predicateInfo
      - provenance
    ## strongly recommended: references
    ## use as-needed: requiresPreProcessing, numericMeasures,
    ##   categoricalMeasures, contextRelevance 
    additionalProperties: False
    properties:
      inputsAndQueryInfo:
        description: >-
          Array of objects (Python list-of-dict-like). Describes valid inputs
          (e.g. Biolink entity class, ID namespace) and additional info for
          querying the API. When this array has >1 element, the relationship
          between the elements is OR (the API can take A OR B as input).
          Currently, all elements should have the same Biolink entity class, so
          elements will differ in their ID namespace, queryInfo, or other
          property
        type: array
        minItems: 1
        items:
          type: object
          required:
            - id
            - semantic
            - queryInfo
          additionalProperties: False
          properties:
            id:
              description: >-
                ID namespace prefix for biomedical entities in the query
              type: string
            semantic:
              description: >-
                Biolink entity class for biomedical entities in the query
              type: string
            requiresPrefix:
              description: >-
                Whether the API expects curies (prefixed IDs) or not. If this
                field is absent, assume False (prefixes not needed)
              type: boolean
            ## for now, comment if the API's expected prefix =/= the id value
            ##   (prefix Translator is using). We could handle this in query
            ##   construction 
            queryInfo:
              description: >- 
                Contains info on the query (API call) for this operation. The
                OpenAPI /paths/operations may have specific fields (e.g.
                parameters, responseBody), and these can be set here
              type: object
              minProperties: 1
              ## Andrew Su: don't require supportBatch 
              ## Kevin: can add simple typing, but name/structure depends on
              ##   what's in the SmartAPI/OpenAPI sections
              properties:
                supportsBatch:
                  description: >-
                    If this field is absent, assume False (API does not support
                    batch querying)
                  type: boolean
                inputSeparator:
                  type: string
                path: 
                  type: string
                method:
                  type: string
                parameters:
                  type: object
                requestBody:
                  type: object  
      outputs:
        description: >-
          Array of objects (Python list-of-dict-like). Describes valid outputs
          (Biolink entity class, ID namespace, etc) and their corresponding
          API (JSON) response field. When this array has >1 element, the
          relationship between the elements is OR (the output will be in A OR
          B format)
        type: array
        minItems: 1
        items:
          type: object
          required:
            - id
            - semantic
            - responseField
          additionalProperties: False
          properties:
            id:
              description: >-
                ID namespace prefix for biomedical entities in the API response
              type: string
            semantic:
              description: >-
                Biolink entity class for biomedical entities in the API
                response
              type: string
            responseField:  
              description: >-
                Dot-notation of the field in the API (JSON) response that
                corresponds to the ID(s) of the biomedical entities
              type: string
            containsPrefix:
              description: >-
                Whether the IDs for the output biomedical entities are curies
                (prefixed IDs) or not. If this field is absent, assume False
              type: boolean
            ## for now, comment if the output prefix =/= the id value (prefix
            ##   Translator is using). We could handle this in post-processing
      requiresPreProcessing:
      ## using this to track when BTE is having to do this
        description: >-
          Whether the API-response-field mapping requires that BTE first
          pre-process the raw API (JSON) response. If this field is absent,
          assume False (no pre-processing needed)
        type: boolean
      predicateInfo:   ## groups predicates together
      ## @ biolink/id/label have similar structure. biolink includes the
      ##   containsPrefix flag to help with post-processing
        type: object
        required:
          - biolink
        ## strongly recommended: id (non-biolink predicate)
        ## use as-needed: label, negated
        additionalProperties: False
        properties: 
          biolink: 
            oneOf:
              ## use this sub-schema (string) when API response doesn't
              ##   give a predicate / predicate is always the same value.
              - description: >-
                  Assign one Biolink predicate (from the related_to hierarchy)
                  that best describes the relationships (associations)
                  returned. Format is no prefix; all undercase; spaces replaced
                  with underscore
                ## currently no enum since it would be LONG
                type: string
              ## Use this when the API response has a field (see description)
              - description: >-
                  Describe the field in the API response that provides one
                  predicate (from the related_to hierarchy) for EACH
                  association returned
                type: object
                required:
                  - responseField
                additionalProperties: False
                properties:
                  responseField: 
                    description: Dot-notation of the API (JSON) field
                    type: string
                  expectedValues: 
                  ## metaKG can use this to list predicates for this operation
                    description: >-
                      Array of possible (non-NA) values in this field. It can
                      be incomplete (when the metadata writer does not know all
                      possible values)
                    type: array
                    minItems: 1
                    items:
                      type: string
                  containsPrefix:
                  ## assuming values are all curies or all not (no mix)
                    description: >-
                      Whether the field returns values with prefixes (are
                      curies) or not. If this field is absent, assume False
                    type: boolean   
          id: 
            oneOf:
              ## use this sub-schema (string) when API response doesn't
              ##   give a predicate / predicate is always the same value.
              - description: >-
                  Assign one relation (OWL ObjectProperty) that best describes
                  the relationships (associations) returned. Expected format is
                  prefix:ID (curie)
                type: string
              ## Use this when the API response has a field (see description)
              - $ref: '#/definitions/simplePredFromResponse'
          label: 
            oneOf:
              ## use this sub-schema (string) ONLY when the id slot uses the
              ##   string-only sub-schema
              - description: >-
                  Assign the human-readable label for the relation in the id
                  slot
                type: string
              ## Use this when the API response has a field (see description)
              - $ref: '#/definitions/simplePredFromResponse'   
          negated:
          ## @ new, assuming no operation returns only negated associations
            description: >- 
              Some operations include negated associations, meaning the
              specified relationship between A and B DOES NOT EXIST. In this
              situation, there should be a boolean-like field to specify
              whether the association is negated or not
            required:
              - responseField
              - negatedValue
            additionalProperties: False
            properties:
              responseField: 
                description: Dot-notation of the API (JSON) field
                type: string
              negatedValue:
                description: Value that means the association is negated
                type: [string, boolean]
      references:
      ## !! Kevin and I were discussing this when we stopped 1/20/21
      ## @ currently assuming one delimiter character per response field...
        description: >- 
          Object (Python dict-like). Describes API (JSON) response fields that
          (1) provide publications related to associations and (2) source
          webpages for the association. Can also provide (3) a template to
          generate source webpage URLs
        type: object
        additionalProperties: False
        minProperties: 1
        patternProperties:
        ## Kevin: this design means ID namespaces have one unambiguous name
          "^pmid$|^pmc$|^doi$|^biorixv$|^medrxiv$|^isbn$":
            description: >-
              Use this when the field values are IDs in a specific namespace;
              the key specifies the namespace. The field is expected to return
              a single URL (string) or an array of URLs (strings). If what is
              returned is instead a string representing a list, use the
              delimiter property
            type: object
            required:
              - responseField
            additionalProperties: False
            properties:
              responseField: 
                description: >-
                  Dot-notation of the field in the API (JSON) response
                type: string
              containsPrefix:
              ## assuming values are all curies or all not (no mix) 
                description: >-
                  Whether the field returns values with prefixes (are curies)
                  or not. If this field is absent, assume False
                type: boolean
              delimiter:
                description: >-
                  Only use this key if the field returns values as a string
                  that represents a list of IDs. The value of this key is the
                  delimiter
                type: string
        properties:
          websites:
            description: >-
              Use this when the field provides website URLs. The field is
              expected to return a single URL (string) or an array of URLs
              (strings). If what is returned is instead a string representing
              a list, use the delimiter property
            type: object
            required:
              - responseField
            additionalProperties: False
            properties:
            ## @ currently assuming no prefix, so no containsPrefix property
              responseField: 
                description: >-
                  Dot-notation of the field in the API (JSON) response
                type: string
              delimiter:
                description: >-
                  Only use this key if the field returns values as a string
                  that represents a list of IDs. The value of this key is the
                  delimiter
                type: string
          websiteTemplate:
            description: >-
              Used to describe how to generate source webpage URLs for the
              association
            type: object
            required:
              - instructions
              - template
              - templateKeys
            additionalProperties: False
            properties:
              instructions:
                description: >-
                  Free-text field. Explains how to use the template
                type: string
              template:
                description: >-
                  A string (Python string-formatting-like). The keywords
                  surrounded by curly brackets are replacement-fields and the
                  keys in the templateKeys slot
                type: string   
              templateKeys:
                description: >-
                  Object (Python dict-like). Keys are the replacement-fields in
                  the template; values are dot-notation of a field in the API
                  (JSON) response OR variable names used in inputsAndQueryInfo.
                  The fields/variables return values that should replace the
                  template keywords, creating one or more URLs (strings)
                type: object
                minProperties: 1
                patternProperties:
                  .:  ## no format for these
                    type: string
      provenance:
        description: >- 
          Object (Python dict-like). Provides (1) structured, static source
          info for associations returned by the operation (AKA where and how
          they were made). Also (2) describes API (JSON) response fields that
          provide this type of info
        type: object
        required:
          - structured
        properties:
          structured:
            description: >-
              Array of objects (Python list-of-dict-like). Describes the static
              source info that applies to ALL associations returned by this
              operation. Each object represents one source
            type: array
            minItems: 1
            items:
              type: object
              required:
                - name
                - sourceType
              additionalProperties: False
              ## only include version if it would be possible to automatically
              ##   update (otherwise leave a comment)
              ## only include optional fields if they are stable / static
              properties:
                name:
                  description: Name of the source (API, knowledgebase, etc)    
                  type: string
              ## !! see https://github.com/NCATS-Tangerine/translator-api-registry/pull/41/files, https://drive.google.com/file/d/1KSN1MDcAzekdMUiyHZYFUL20otrluJg3/view (downloaded locally) to see how to spell/case names. Record what I'm doing in FileONames  
                sourceType:  ## @ later set enum                   
                  description: Type of the source
                ## !! Record what I'm using in FileONames  
                  type: string
                version:
                  type: string
                versionType:
                ## @ later set enum (limited options)
                ## @ adding because people may describe version for the same
                ##   source differently...
                ## !! Record what I'm using in FileONames  
                  description: The format of the version
                  type: string              
                method:
                ## many reasons why there wouldn't be a method specified:
                ##  (1) doesn't have one (text corpus)
                ##  (2) couldn't find it / ambiguous
                ##  (3) dynamic (depends on response, could be one of multiple
                ##   values)
                ## !! Record what I'm using in FileONames  
                  description: >-
                    Keyword describing what the source did to create
                    associations from data or knowledge
                  type: string
                references:
                ## Provides publications and webpages describing where and how
                ##   associations were made; static
                  $ref: '#/definitions/staticRefs' 
                descriptiveInfo:      
                  description: >-
                    Free-text description of what the source did to create
                    associations (remember to only include stable info)
                  type: string
          dynamic:
          ## use when field provides values that vary (so API provides 
          ##   associations from multiple sources
            description: >-
              Array of objects (Python list-of-dict-like). Describes API (JSON)
              response fields that provide source info. The field is expected
              to return a string (representing one piece of source info) or an
              array of strings (representing multiple pieces of info). If what
              is returned is instead a string representing a list, use the
              delimiter property
            type: array
            minItems: 1
            items:
              type: object
              required:
                - responseField
                - provenanceType
              additionalProperties: False
              properties:
                responseField: 
                  description: >-
                    Dot-notation of the field in the API (JSON) response
                  type: string
                provenanceType:
                  description: >-
                    Keyword describing what kind of info the field provides 
                  type: string
                  ## @ add if more things seem useful. currently related to
                  ##   the structured sub-schema's fields...
                  enum:
                    - sourceNames
                    ## how associations were made from data or knowledge
                    - methods
                expectedValues:  
                  description: >-
                    Array of possible (non-NA) values in this field. It can be
                    incomplete (when the metadata writer does not know all
                    possible values)
                  type: array
                  minItems: 1
                  items:
                    type: string                  
                delimiter:
                  description: >-
                    Only use this key if the field returns values as a string
                    that represents a list of IDs. The value of this key is the
                    delimiter
                  type: string
      context:
      ## WHERE and WHEN is this association valid/relevant
        description: >- 
          Object (Python dict-like). Context is information that restricts the
          use or interpretation of this association. It helps one know if the
          operation or the associations retrieved are relevant to the question
          being asked. The keys specify the type of context that is being
          provided. The values should be from ontologies (prefixed IDs, curies)
          or keywords (short strings)
        type: object
        additionalProperties: False
        minProperties: 1
        patternProperties:
          ## @ assuming one field per context type
          taxonSpecific|diseaseSpecific|cohortSpecific|experimentalSpecific:
            oneOf:
              ## use this sub-schema (string) when we are assigning this info
              ##   because it's not in the API response or is always the same
              - description: >-
                  Assign one ontology term (ideally an OWL Class) that best
                  describes the context. Format is prefix:ID
                type: string
              ## Use this when the API response has a field (see description)
              - description: >-
                  Describe the API (JSON) response field that provide context
                  info. The field is expected to return a string (one ontology
                  term or keyword) per association
                type: object
                required:
                  - responseField
                additionalProperties: False
                properties:
                  responseField: 
                    description: Dot-notation of the API (JSON) field
                    type: string
                  expectedValues: 
                  ## metaKG can use this to list context for this operation
                    description: >-
                      Array of possible (non-NA) values in this field. It can
                      be incomplete (when the metadata writer does not know all
                      possible values)
                    type: array
                    minItems: 1
                    items:
                      type: string
                  containsPrefix:
                  ## assuming values are all curies or all not (no mix)
                    description: >-
                      Whether the field returns values with prefixes (are
                      curies) or not. If this field is absent, assume False
                    type: boolean
      ## @ may set up fields later for other info, like what was used to infer
      ##   associations via triangulation (e.g. variant for disease->gene),
      ##   text-mining info, clinical-data/exposures info
## this is 79 char long #######################################################          
      numericMeasures:
        description: >- 
          Array of objects (Python list-of-dict-like). Describes API (JSON)
          response fields that provide a numeric value related to the
          association. Often from an analysis used to evaluate the association
        type: array
        minItems: 1
        items:
          allOf:
            - $ref: '#/definitions/generalMeasure'   
            ## includes additional properties for numeric measures
            - type: object
              required:
                - directionMeaning
              ## don't set additionalProperties to False, will mess with allOf
              properties:
                directionMeaning:
                  description: >-
                    Object (Python dict-like). Each key is a direction (larger,
                    closer_to_zero, more_negative, etc.). Each value is what
                    the direction means (more_specific, more_evidence,
                    more_confident, more_consistent, more_probable, etc.). One
                    may want to explain multiple directions (e.g. negative
                    association vs no association vs positive association)
                  type: object
                  minProperties: 1
                  ## @ later set enum for keys and values?
                  additionalProperties: False
                  patternProperties:
                    .:    ## no format for these
                      type: string
                range:
                  ## do not set a range if a measure can take on any value 
                  description: >-
                    Object (Python dict-like). Defines an expected lower and/or
                    upper bound for values (min, max). Inclusive means the
                    range includes the boundary number; exclusive means the
                    range does not. If the actual lower-bound is -infinity
                    and/or the actual upper bound is +infinity, DO NOT define
                    a bound
                  type: object
                  additionalProperties: False
                  minProperties: 1
                  properties:            
                    minExclusive: 
                      type: number
                    maxExclusive:
                      type: number
                    minInclusive:
                      type: number
                    maxInclusive:
                      type: number
                  not:  ## used to make 2 mins or 2 maxs not allowed
                  ## means that instance is invalid if...
                    anyOf:
                      - type: object
                        required: ## both mins are present
                          - minExclusive
                          - minInclusive 
                      - type: object
                        required: ## both maxs are present
                          - maxExclusive
                          - maxInclusive                 
                units: 
                ## assume the same units for all instances of one measure 
                  description: Units for the measure values
                  type: string   
      categoricalMeasures:
      ## @ many fields treat this as a list of keywords, not a categorical
      ##   variable from stats (which takes on only ONE value). So definition
      ##   has been changed to accommodate this. 
      ## @ Use singleValuesOnly flag to note stats categorical vars
        description: >- 
          Array of objects (Python list-of-dict-like). Describes API (JSON)
          response fields that provide one or more keyword (string) values
          related to the association and do not fit into the other fields
          (predicateInfo, provenance, contextRelevance). The field is expected
          to return a string (representing one keyword) or an array of strings
          (representing multiple keywords). If what is returned is instead a
          string representing a list, use the delimiter property
        type: array
        minItems: 1
        items:
          allOf:
            - $ref: '#/definitions/generalMeasure'   
            ## includes additional properties for categorical measures
            - type: object
              required:
                - expectedValues
              ## don't set additionalProperties to False, will mess with allOf
              properties:
                expectedValues:  
                  description: >-
                    Array of possible (non-NA) values in this field. It can be
                    incomplete (when the metadata writer does not know all
                    possible values)
                  type: array
                  minItems: 1
                  items:
                    type: string
                singleValuesOnly:  
                  description: >-
                    True when this field takes on ONLY ONE value for every
                    association. It can therefore be treated as a categorical
                    variable in statistics
                  type: boolean                    
                delimiter:
                  description: >-
                    Only use this key if the field returns values as a string
                    that represents a list of IDs. The value of this key is the
                    delimiter
                  type: string
                directionMeaning:
                  description: >-
                    Object (Python dict-like). The key is the direction to
                    reada the expectedValues, forward or reverse. The value is
                    what the direction means (more_specific, more_evidence,
                    more_confident, more_consistent, more_probable, etc.)                  
                  type: object
                  minProperties: 1
                  additionalProperties: False
                  patternProperties:
                  ## @ later set enum for keys and values?
                    forward|reverse:    ## no format for these
                      type: string
## this is 79 char long #######################################################
## for references from main oneAssociationRetrievalObj sub-schema
  simplePredFromResponse:
    description: >-
      Describe the field in the API response that provides one predicate (from
      the related_to hierarchy) for EACH association returned
    type: object
    required:
      - responseField
    additionalProperties: False
    properties:
      responseField: 
        description: Dot-notation of the API (JSON) field
        type: string
      expectedValues: 
      ## metaKG can use this to list the predicates this operation can return
        description: >-
          Array of possible (non-NA) values in this field. It can be incomplete
          (when the metadata writer does not know all possible values)
        type: array
        minItems: 1
        items:
          type: string
  staticRefs: 
    type: object
    additionalProperties: false
    minProperties: 1
    ## @ use same patternProperties as references above
    patternProperties:
      "^pmid$|^pmc$|^doi$|^biorixv$|^medrxiv$|^isbn$":
      ## The key specifies the namespace. The value is a single ID (string,
      ##   number) or an array of IDs
        oneOf:
          - type: [string, number]
          - type: array
            minItems: 1
            items:
              type: [string, number]   
    properties:
      websites:  ## one or more URLs (strings)
        oneOf:
          - type: string
          - type: array
            minItems: 1
            items:
              type: string    
  ## assumes a measure's values are in one API response field
  ## oneNumericMeasure and oneCategoricalMeasure build on generalMeasure
  generalMeasure:  
    type: object
    required:
    - name
    - responseField
    ## don't set additionalProperties to False, will mess with allOf
    properties:
      name:
        description: >-
          Name of the measure (include the name of the resource that
          calculated it)
        ## !! Record what I'm using in FileONames
        type: string
      ontologyTerm:
        description: >-
          Ontology term (ideally an OWL Class) that corresponds with this
          measure. Format is prefix:ID
        type: string
      responseField:
        description: >-
          Dot-notation of the field in the API (JSON) response
        type: string
      missingValueMeaning:
        description: >-
          Short free-text explaining what a missing/NULL/NA value would mean
        type: string
      references:  
      ## put publications/websites with more info on the measure here
      ## static, shouldn't depend on response
        $ref: '#/definitions/staticRefs'