## notes for developers:
## - use this to validate registry files
## - this schema has "$ref" that need to be expanded in use.
##   Python has the library jsonref that can be used for this. 
## - objects must include "type:object" and "properties". If removed, the
##   validation will not work correctly. 
## - x-bte-association-retrieval can be a separate metadata extension for now,
##   so code dependent on x-bte-kgs-operations (current) doesn't break 
## - from Andrew Su: for now, require less.

## issues / Q for Kevin marked @ or !!

## notes:
## - schema cannot enforce/check format for predicates from responseFields. However, during post-processing or later, we could string format (undercase, spaces -> underscore) and make curies
## - if there are reference fields with multiple ID namespaces for an API operation, currently it seems we have to pre-process responses to create separate fields for each ID namespace...

title: Schema for objects within x-bte-association-retrieval
$schema: 'http://json-schema.org/draft-07/schema#'
type: object
description: >-
  Describes the x-bte-association-retrieval metadata extension within SmartAPI
  registry files. Knowledge-provider (KP) APIs in the Translator ecosystem
  provide associations/edges between biomedical entities. This extension
  includes 1) additional support for querying those APIs, 2) metadata for
  processing API responses, and 3) metadata to add required fields to the API
  responses
required:
  - components
properties:
  components:
    type: object
    properties:
      x-bte-association-retrieval:
        definition: >-
          Each key inside this object corresponds to one association-retrieval
          operation, which consists of one Biolink entity class and a unique
          set of metadata
        type: object     
        minProperties: 1
        patternProperties:
          .:  ## usually named inputType-outputType-number
            $ref: '#/definitions/oneAssociationRetrievalObj'       
definitions:
  oneAssociationRetrievalObj:
    type: object
    required:
      - inputsAndQueryInfo
      - outputs
      - predicateInfo
      - provenance
    ## strongly recommended: references
    ## use as-needed: requiresPreProcessing, numericMeasures,
    ##   categoricalMeasures, contextRelevance 
    additionalProperties: False
    properties:
      inputsAndQueryInfo:
        description: >-
          Array of objects (Python list-of-dict-like). Describes valid inputs
          (e.g. Biolink entity class, ID namespace) and additional info for
          querying the API. When this array has >1 element, the relationship
          between the elements is OR (the API can take A OR B as input).
          Currently, all elements should have the same Biolink entity class, so
          elements will differ in their ID namespace, queryInfo, or other
          property
        type: array
        minItems: 1
        items:
          type: object
          required:
            - id
            - semantic
            - queryInfo
          additionalProperties: False
          properties:
            id:
              description: >-
                ID namespace prefix for biomedical entities in the query
              type: string
            semantic:
              description: >-
                Biolink entity class for biomedical entities in the query
              type: string
            requiresPrefix:
              description: >-
                Whether the API expects curies (prefixed IDs) or not. If this
                field is absent, assume False (prefixes not needed)
              type: boolean
            ## for now, comment if the API's expected prefix =/= the id value
            ##   (prefix Translator is using). We likely have to handle that
            ##   in query construction
            queryInfo:
              description: >- 
                Contains info on the query (API call) for this operation. The
                OpenAPI /paths/operations may have specific fields (e.g.
                parameters, responseBody), and these can be set here

## this is 79 char long #######################################################          
## - flag when prefix in data (references, biolink) doesn't match the key (Biolink, pubmed; call it prefixMatchesKey)? Or BTE can automatically remove prefix (whether it matches or not) / replace prefix with key
## - assuming only one delimiter per response field stringList thing...
## @ consider adding back a key ("when the record doesn't have this key inside...") -> use this value to for it (previously the "default" key)  
              type: object
              minProperties: 1
              ## Andrew Su: don't require supportBatch 
              ## Kevin: can add simple typing, but name/structure depends on
              ##   what's in the SmartAPI/OpenAPI sections
              properties:
                supportsBatch:
                  description: >-
                    If this field is absent, assume False (API does not support
                    batch querying)
                  type: boolean
                inputSeparator:
                  type: string
                path: 
                  type: string
                method:
                  type: string
                parameters:
                  type: object
                requestBody:
                  type: object  
      outputs:
        description: >-
          Array of objects (Python list-of-dict-like). Describes valid outputs
          (biolink entity class, ID namespace, etc) and their corresponding
          API (JSON) response field. When this array has >1 element, the
          relationship between the objects is OR (the output will be in
          A OR B format)
        type: array
        minItems: 1
        items:
          type: object
          required:
            - id
            - semantic
            - responseField
          additionalProperties: False
          properties:
            id:
              description: >-
                ID namespace prefix for biomedical entities in the API response
              type: string
            semantic:
              description: >-
                Biolink entity class for biomedical entities in the API
                response
              type: string
            responseField:  
              description: >-
                Dot-notation of the field in the API (JSON) response that
                corresponds to the ID(s) of the biomedical entities
              type: string
            containsPrefix:
              description: >-
                Whether the IDs for the output biomedical entities are curies
                (prefixed IDs) or not. If this field is absent, assume False
              type: boolean
      requiresPreProcessing:
        description: >-
          Whether the API-response-field mapping requires that BTE first
          pre-process the raw API (JSON) response. If this field is absent,
          assume False (no pre-processing needed)
        type: boolean
      predicateInfo:   ## groups predicates together
        type: object
        required:
          - biolink
        ## strongly recommended: id (non-biolink predicate)
        ## use as-needed: label, negated
        additionalProperties: False
        properties: 
          biolink: 
            oneOf:
              - description: >-
                  For this operation, assign one Biolink predicate (from the
                  biolink related_to hierarchy) that best describes the kind of
                  relationship (associations) returned. This sub-schema is used
                  when the API response does not give a predicate or the
                  predicate is always the same value. Format is no prefix; all
                  undercase; space replaced with underscore
                ## currently no enum since it would be LONG
                type: string
              - description: >-
                  A field in the API response provides a Biolink predicate
                  (from the biolink related_to hierarchy) for EVERY association
                  returned. The field value should be a string representing one
                  predicate
                type: object
                required:
                  - responseField
                additionalProperties: False
                properties:
                  responseField: 
                    description: Dot-notation of the API (JSON) field
                    type: string
                  expectedValues:  
                    description: >-
                      Array of the possible values of this field. The metaKG
                      uses this metadata to list the predicates this operation
                      can return. It is okay for this to be an incomplete list
                      (when the metadata writer does not know all of the
                      possible values)
                    type: array
                    minItems: 1
                    items:
                      type: string
                  containsPrefix:  ## @ is this needed?
                  ## assuming values are all curies or all not (no mix)
                    description: >-
                      Whether the field value has a prefix or not. If
                      this field is absent, assume False
                    type: boolean 
          id: 
            oneOf:
              - description: >-
                  For this operation, assign one relation (OWL ObjectProperty)
                  that best describes the kind of relationship (associations)
                  returned. This sub-schema is used when the API response does
                  not give a relation or the relation is always the same value.
                  Format is prefix:ID (curie)
                type: string
              - description: >-
                  A field in the API response provides a relation (OWL
                  ObjectProperty) for EVERY association returned. The field
                  value should be a string representing one relation in curie
                  format (prefix:ID)                  
                type: object
                ## currently assuming curies so containsPrefix / prefixes
                ##   (list what the prefixes are) aren't needed 
                required:
                  - responseField
                additionalProperties: False
                properties:
                  responseField: 
                    description: Dot-notation of the API (JSON) field
                    type: string
                  expectedValues:  
                    description: >-
                      Array of the possible values of this field. The metaKG
                      uses this metadata to list the relations this operation
                      can return. It is okay for this to be an incomplete list
                      (when the metadata writer does not know all of the
                      possible values)
                    type: array
                    minItems: 1
                    items:
                      type: string
          label: 
            oneOf:
              - description: >-
                  For this operation, one can assign the human-readable label
                  for the relation in the id slot. This sub-schema can be used
                  when the id uses the corresponding (type:string) sub-schema
                type: string
              - description: >-
                  A field in the API response provides a human-readable label
                  for the relation for EVERY association returned. The field
                  value should be a string representing one label
                type: object
                ## currently assuming no prefix so containsPrefix / prefixes
                ##   (list what the prefixes are) aren't needed 
                required:
                  - responseField
                additionalProperties: False
                properties:
                  responseField: 
                    description: Dot-notation of the API (JSON) field
                    type: string
                  expectedValues:  
                    description: >-
                      Array of the possible values of this field. The metaKG
                      could use this field to list the relation labels this
                      operation can return. It is okay for this to be an
                      incomplete list (when the metadata writer does not know
                      all of the possible values)
                    type: array
                    minItems: 1
                    items:
                      type: string   
          negated:
          ## @ new, assuming no operation returns only negated associations
            description: >- 
              Some operations may include negated associations, meaning the
              specified relationship between A and B DOES NOT EXIST. In this
              situation, APIs tend to provide a boolean-like field to specify
              whether the association is negated or not
            required:
              - responseField
              - negatedValue
            additionalProperties: False
              properties:
                responseField: 
                  description: Dot-notation of the API (JSON) field
                  type: string
                negatedValue:
                  description: Value that means the association is negated
                  type: [string, boolean]                  
      references:
      ## !! Kevin and I were discussing this when we stopped 1/20/21
        description: >- 
          Object (Python dict-like). Describes API (JSON) response fields that
          provide publications related to associations and source webpages for
          the association. Can also provide a template to generate source
          webpage URLs
        type: object
        additionalProperties: False
        minProperties: 1
        properties:
          websites:
            description: >-
              Use this sub-schema when the field values are website URLs. The
              format is expected to be a single URL (string) or an array of
              URLs (strings). If the field value is instead a string
              representing a list, use the delimiter property
            type: object
            required:
              - responseField
            additionalProperties: False
            properties:
            ## currently assuming no prefix so containsPrefix not needed 
              responseField: 
                description: >-
                  Dot-notation of the field in the API (JSON) response
                type: string
              delimiter:
                description: >-
                  Only use this key if the field value is a string representing
                  a list of URLs. The value of this key is the delimiter
                type: string
          websiteTemplate:
            description: >-
              Used to describe how to generate source webpage URLs for the
              association
            type: object
            required:
              - instructions
              - template
              - templateKeys
            additionalProperties: False
            properties:
              instructions:
                description: >-
                  Free-text field. Explains how to use the template
                type: string   
              template:
                description: >-
                  A string (Python string-formatting-like). The keywords
                  surrounded by curly brackets are replacement-fields (the keys
                  in templateKeys)
                type: string   
              templateKeys:
                description: >-
                  Object (Python dict-like). Keys are the replacement-fields in
                  the template; values are dot-notation of a field in the API
                  (JSON) response OR variable names used in inputsAndQueryInfo.
                  Those values replace the template keywords, creating one or
                  more URL strings
                type: object
                minProperties: 1
                patternProperties:
                  .:  ## no format for these
                    type: string
        patternProperties:
        ## for references with one ID namespace
        ## Kevin: this design means the namespaces have one unambiguous name
          "^pmid$|^pmc$|^doi$|^biorixv$|^medrxiv$|^isbn$":
            description: >-
              Use this sub-schema when the field values are IDs in a specific
              namespace; the key specifies the namespace. The field value is
              expected to be a single ID (string, number) or an array of IDs.
              If the field value is instead a string representing a list,
              use the delimiter property
            type: object
            required:
              - responseField
            additionalProperties: False
            properties:
              responseField: 
                description: >-
                  Dot-notation of the field in the API (JSON) response
                type: string
              containsPrefix:
              ## assuming values are all curies or all not (no mix) 
                description: >-
                  Whether the IDs have prefixes (are curies) or not. If this
                  field is absent, assume False
                type: boolean
              delimiter:
                description: >-
                  Only use this key if the field value is a string representing
                  a list of IDs. The value of this key is the delimiter
                type: string
      provenance:
        description: >- 
          Object (Python dict-like). Provides structured, static source info
          for associations returned by the operation (AKA where and how they
          were made). Also describes API (JSON) response fields that provide
          this type of info
        type: object
        required:
          - structured
        properties:
          structured:
            description: >-
              Array of objects (Python list-of-dict-like). Describes the static
              source info that applies to ALL associations returned by this
              operation. Each object represents one source
            type: array
            minItems: 1
            items:
              type: object
              required:
                - name
                - sourceType
              additionalProperties: False
              ## only include version if it would be possible to automatically
              ##   update (otherwise leave a comment)
              ## only include other fields if they are stable / static  
              properties:
                name:
                  description: Name of the source (API, knowledgebase, etc)    
                  type: string
                sourceType:  ## @ later set enum                   
                  description: >-
                    Type of the source. Possible values include service,
                    knowledgebase, publications, text, clinical_database
                  type: string              
                version:
                  type: string
                versionType:
                ## @ later set enum (limited options)
                ## @ used because people may describe version for the same
                ##   source differently...
                  description: >-
                    The format of the version. Possible values include
                    date_last_updated, version_number, data_from_this_date,
                    latest_date_covered
                  type: string              
                method:
                ## simple keyword descriptors
                ## many reasons why there wouldn't be a method value: doesn't
                ##   have one (text corpus), couldn't find it / ambiguous,
                ##   dynamic (depends on response, could be one of multiple
                ##   values)
                ## @ edit this description as you add values
                  description: >-
                    Keyword describing what the source did to create
                    associations from data or knowledge. Possible values
                    include ingest, NLP, shared_gene_annot
                  type: string
                references:
                  description: >-
                    Provides publications and webpages describing where and how
                    associations were made
                  type: object
                  additionalProperties: false
                  minProperties: 1
                  properties:
                    websites:  ## one or more URLs (strings)
                      type: [string, array]
                  patternProperties:
                    "^pmid$|^pmc$|^doi$|^biorixv$|^medrxiv$|^isbn$":
                      description: >-
                        The key specifies the namespace. The value is a single
                        ID (string, number) or an array of IDs
                      type: [string, number, array]
                descriptiveInfo:      
                  description: >-
                    Free-text description of what the source did to create
                    associations (remember to only include stable info)
                  type: string
          dynamic:
            description: >-
              Array of objects (Python list-of-dict-like). Describes the
              dynamic source info from one or more API (JSON) response fields.
              A field value is expected to a string (representing one thing) or
              an array of strings (multiple things). If the field value is
              instead a string representing a list, use the delimiter property
            type: array
            minItems: 1
            items:
              type: object
              required:
                - responseField
                - provenanceType
              additionalProperties: False
              properties:
                responseField: 
                  description: >-
                    Dot-notation of the field in the API (JSON) response
                  type: string
                provenanceType:
                  description: >-
                    Keyword describing what kind of info the field provides 
                  type: string
                  ## @ add if more things seem useful. currently related to
                  ##   the structured fields...
                  enum:
                    - sourceNames
                    ## how associations were made from data or knowledge
                    - methods
                expectedValues:  
                  description: >-
                    Array of the possible values of this field. It is okay for
                    this to be an incomplete list (when the metadata writer
                    does not know all of the possible values)
                  type: array
                  minItems: 1
                  items:
                    type: string                  
                delimiter:
                  description: >-
                    Only use this key if the field value is a string
                    representing a list of things. The value of this key is
                    the delimiter
                  type: string
                

      ## WIP: still have the measures and context left
      ##   watch for multi-value categorical, contextRelevance prefixes/containsPrefixes
      
## this is 79 char long #######################################################          
