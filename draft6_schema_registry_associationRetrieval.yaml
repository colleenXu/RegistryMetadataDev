## follows JSON schema, has "$ref" that need to be expanded in use. 
title: Schema for objects within x-bte-association-retrieval
$schema: 'http://json-schema.org/draft-07/schema#'  ## try this version, latest stable
type: object
description: >-
  Describes the operations that retrieve associations/edges between biomedical
  entities, using a knowledge-provider (KP) API in the Translator ecosystem. 
  A KP API may do multiple operations of this type. These operations are 
  defined (kept separate) by their different combinations of input-entity-type,
  biolink predicate, source, and output-entity-type. 
properties:
  components:
    type: object
    properties:
      x-bte-association-retrieval:
        type: object
        ## no naming format, but each operation must fit the schema
        patternProperties:
          .:
            $ref: '#/definitions/oneAssociationRetrievalObj'
        additionalProperties: False
definitions:
  oneAssociationRetrievalObj:
    type: object
    required:
    - queryInfo
    - inputs
    - outputs
    - predicateInfo
    - provenance
    ## strongly recommended: references
    ## use if needed: numericMeasures, categoryMeasures, contextRelevance
    additionalProperties: False
    properties:
      queryInfo:
        description: >- 
          Object that contains info on the query (API call) for this operation. 
          The OpenAPI /paths/operations may have specific fields 
          (like parameters, responseBody, etc.), and these can be set here. 
        type: object
        required:
        - supportBatch
        ## Kevin: can add simple field typing, but cannot require them 
        properties:
          supportBatch:
            type: boolean
          inputSeparator:
            type: string
          parameters:
            type: object
          requestBody:
            type: object    
      ## ?? can incorporate nodesConflated properties into inputs/outputs?
      inputs:
        description: >-
          Array of objects (Python-list-of-dict-like). Describes the 
          valid inputs and their identifier namespaces for the query. 
        type: array
        items:
          $ref: '#/definitions/inputInfo'
      outputs:
        description: >-
          Array of objects (Python-list-of-dict-like). Describes the 
          valid outputs, their identifier namespaces, and the API JSON 
          response fields that contain them. 
        type: array
        items:
          $ref: '#/definitions/outputInfo'
      ## WHAT the relationship is                    
      predicateInfo:
        type: object
        required:
          - biolink
        additionalProperties: False
        properties:
        ## biolink, id, label may be described differently depending on the 
        ##   API/resource's data modeling. Use different schemas to handle this
          biolink:
#             Biolink relation that best describes the association. Similar to 
#             the predicate field in a TRAPI (Q)Edge. 
            oneOf:
            - $ref: '#/definitions/staticValue'
            - $ref: '#/definitions/takesOnResponseValue'
            - $ref: '#/definitions/transformedFromResponseValue'
          id:
#             Relation (OWL ObjectProperty) that best describes the association. 
#             Formatted as a CURIE with prefix:ID. May be assigned by Translator
#             team member or may be in the original information. Similar to the 
#             relation field in a TRAPI (Q)Edge.
            oneOf:
            - $ref: '#/definitions/staticValue'
            - $ref: '#/definitions/takesOnResponseValue'
            - $ref: '#/definitions/transformedFromResponseValue'
          label:
#             Human-readable label for id field above. 
            oneOf:
            - $ref: '#/definitions/staticValue'
            - $ref: '#/definitions/takesOnResponseValue'
            - $ref: '#/definitions/transformedFromResponseValue'
          nodesConflated:
          ## ?? can incorporate into inputs/outputs fields
          ## currently assuming it doesn't depend on response 
            description: >-
              Array of objects (Python-list-of-dict-like). Used when 
              the associations conflate the Biolink entity classes/types 
              of the entities involved. For example, gene-disease associations
              often involve conflation of a gene with its altered gene product. 
            type: array
            items:
              $ref: '#/definitions/conflatedNode'  
      references:  ## IMPORTANT: users use this as evidence
      ## includes publications and source websites that show the association
        $ref: '#/definitions/referenceObj'              
      ## WHERE the association and its related info come from, and HOW   
      provenance:
        description:
          Groups together provenance related to this association.
        type: object
        properties:
          associationRetrieval:  
          ## could be static for simple knowledge-source: follow
          ##   provenanceModel. 
          ## but complex knowledge-sources currently involve a good amount 
          ##   of processing/mapping values from response fields. 
          ##   Provenance is so tricky because there isn't standardization 
          ##   or detailed, computationally-available info on 
          ##   how the associations were made 
            oneOf:
            - $ref: '#/definitions/oneProvenanceList' 
            - $ref: '#/definitions/transformedFromResponseValue' 
              ## assumes only one responseField used to map provenance, needs change?
      ## MEASURES give INFO about this association and can be EVIDENCE for it                      
      numericMeasures:
        description: >-
          Array of objects (Python-list-of-dict-like), gives info about 
          the measure and what response field to use to retrieve it. 
        type: array
        items:
          $ref: '#/definitions/oneNumericMeasure'        
      categoryMeasures:
        description: >-
          Array of objects (Python-list-of-dict-like), gives info about 
          the measure and what response field to use to retrieve it. 
        type: array
        items:
          $ref: '#/definitions/oneCategoryMeasure'             
      ## WHERE and WHEN is this information valid/relevant
      contextRelevance:
        description: >-
          Groups together context/relevance related to this specific association. 
          Context/relevance is information that restricts the use or 
          interpretation of this association. 
          This is sometimes necessary for querying or for knowing when the 
          retrieved association is relevant to the problem being addressed. 
        type: object
        properties:
          associationRetrieval:   
            $ref: '#/definitions/contextObj'  
      ## may set up fields later for other info? like what was used for 
      ##   triangulation (variant for disease->gene?), text-mining info, 
      ##   clinical-data/exposures info?
################################################################################      
  ## DEFINITIONS for sub-schemas used in the oneAssociationRetrievalObj above              
  inputInfo:
    type: object
    required:
    - id
    - semantic
    additionalProperties: False
    properties:
      id:
        description: ID namespace prefix for the query input
        type: string
      semantic:
        description: Biolink entity class for the query input
        type: string
      requiresPrefix:
        description: >-
          Whether the API expects IDs to be curies (have prefixes included) 
          or not
        type: boolean
        default: false
  outputInfo:
    type: object
    required:
    - id
    - semantic
    - responseField
    additionalProperties: False
    properties:
      id:
        description: ID namespace prefix for the query output
        type: string
      semantic:
        description: Biolink entity class for the query output
        type: string
      responseField:  
        description: >-
          Dot-notation for the field in API/JSON response that names/identifies
          the output biomedical entity in the association/relationship 
        type: string
      containsPrefix:
        description: >-
          Whether the API responseField values are curies (have prefixes included) 
          or not
        type: boolean
        default: false
## some info we want is included in the API/JSON response, some isn't. 
## To handle this, those fields must follow one of the following sub-schemas:
## - staticValue: info is static, not dependent on response 
## - takesOnResponseValue: info should take on the value of a specific field in 
##   the API/JSON response 
## - transformedFromResponseValue: info should be transformed from the value of 
##   a specific field in the API/JSON response. This involves a mapping file and 
##   code OR just code that calls services 
## - transformedFromTemplate: similar to transformedFromResponseValue, except
##   that a template and code is involved 
  stringOrArrayOfStrings:
    oneOf:
    - type: array
      items:
        type: string
    - type: string
  staticValue:
    description: >-
      Edge property is static, not dependent on response values. In this 
      situation, a field called value is used. 
    type: object
    required:  
    - value
    properties:
      value: 
        $ref: '#/definitions/stringOrArrayOfStrings'  
  takesOnResponseValue:
    description: >-
      Edge property is dynamic and should have the value of a specific field in 
      the API response/JSON record. In this situation, a field called 
      responseField is used. Use dot-notation to refer to the response field. 
    type: object
    required:
    - responseField   
    properties:
      responseField:  ## assuming this is a dot-notation string
        type: string  
  transformedFromResponseValue:
    ## currently assume mapping from one field only
    ## change responseField value to an array if assumption above not true
    description: >-
      Edge property is dynamic but its value has to be mapped or transformed 
      from the value of a specific field in the API response/JSON record. 
    required:
    - instructions
    - responseField
    - bteCode
    properties:
      instructions:
        description: >-
          describes what should be done to get the desired info, using the other
          items in this object. Also describes the result (what is the edge 
          property key, what is the value). 
        type: string   
      responseField:
        description: dot-notation for field in API/JSON response to use.  
        type: string   
      mappingFile:
        description: >-
          github link to YAML file that contains the mapping from values in 
          specific API/JSON responses to the desired info. Used for 
          post-processing (see bteCode field).
        type: string     
      bteCode:
        description: >-
          github link to code that BTE uses to post-process API/JSON response 
          (either using the mapping file or calling services) and get the info.
        type: string     
  transformUsingTemplate:
  ## used by references/websites 
    description: >-
      Edge property is dynamic but has to be transformed from other values (API
      response/JSON record fields or variables) using a template
    required:
    - instructions
    - template
    - templateKeys
    - bteCode 
    properties:
      instructions:
        description: >-
          describes what should be done to get the desired info, using the 
          template and data (denoted using keywords). Also describes the result 
          (what is the edge property key, what is the value). 
        type: string   
      template:
        description: >-
          the string template (Python string-formatting-like). Keywords inside 
          curly brackets denote the parts of the template that should be 
          replaced by the corresponding values (see templateKeys). 
        type: string   
      templateKeys:
        description: >-
          Python-dict-like. Keys are the keywords used in the template;
          values are the API/JSON response fields or variable names that contain
          data. The data should be used to replace the keywords in the template. 
        type: object  
        patternProperties:
          .:
            type: string      
      bteCode:
        description: >-
          github link to code that BTE uses to post-process API/JSON response 
          to get the desired info (edge property with value being an array of
          strings). 
        type: string  
  conflatedNode:
    type: object
    required:
    - original
    - conflated  
    properties:
      original:
        description: >-
          The current Biolink entity class (aka the node type) connected to this
          edge, which is being conflated with another Biolink entity class.
        type: string
      conflated:
        description: >-
          The Biolink entity class (aka the node type) that the association is
          rooted in from a biological point-of-view. For example, a gene-disease
          association may really be based on altered gene products and their
          activities; the original_type would be Gene and the conflated_type
          would be GeneProduct.
        type: string
      where:
        description: >-
          Name of the source (API/knowledge-source) where this happened, in 
          display format (source way of capitalizing their name, with spaces).  
          Should match the name of a knowledge-source described in the provenance 
          associationRetrieval field.
        type: string  
  referenceObj:  
    description: >- 
      Used to provide publications and website URLs for users who want to learn 
      more about an association, knowledge-source, measure, context/relevance, etc. 
    type: object
    additionalProperties: False
    properties: 
      publications:
        type: object
        additionalProperties: False
        patternProperties:
        ## keys are ID namespace like pmid, pmc, doi, biorixv, medrxiv...
          .:  
            oneOf:  ## values are static or come from the response
            - $ref: '#/definitions/staticValue'
            - $ref: '#/definitions/takesOnResponseValue'
            - $ref: '#/definitions/transformedFromResponseValue' 
      websites:
      ## value is static or can be made using a template
        oneOf:  ## values are static or come from the response
        - $ref: '#/definitions/staticValue'
        - $ref: '#/definitions/transformUsingTemplate'
## assuming measure values are in the API response/JSON record. 
## therefore, schema similar to takesOnResponseValue, with some additional 
##   static information about the measure 
## oneNumericMeasure and oneCategoryMeasure build on generalMeasure schema
  generalMeasure:
    type: object
    required:
    - name
    - responseField
    ## DO NOT SET additionalProperties to False, since other schemas build on this 
    properties:
      name:
        description: >-
          Name of the measure (include the name of the resource that calculated it). 
          In display format (source way of capitalizing the names, with spaces).  
        type: string
      ontologyTerm:
        description: >-
          Term from an ontology (ideally an OWL Class) that corresponds with
          this measure. Format is prefix:ID. 
        type: string
      responseField:
        description: >-
          The measure value is in a specific field in the API response/JSON record. 
          Use dot-notation to refer to the response field.
        type: string
      missingValueMeaning:
        description: >-
          Short free-text, explaining what a missing/NULL/NA value for this 
          measure, for a specifc association/edge would mean. The assumption is 
          that only some associations/edges have a missing value. 
        type: string
      measureReferences:  
      ## put the publications/websites for more info here
        $ref: '#/definitions/referenceObj'     
  oneNumericMeasure:
#     Numeric measures have additional required info, like range and the 
#     meaning of directions. Units may also be specified. 
    allOf:
    - $ref: '#/definitions/generalMeasure'      
    - type: object
      required:
      - range
      - directionMeaning
      ## don't set additionalProperties to False, will mess with allOf validation 
      properties:
        range:
          ## do not set a range if a measure can take on any value from 
          ## negative-infinity to positive-infinity
          description: >-
            Python-dict-like. Should define an expected lower and/or upper 
            bound for values (minimum and maximum). Inclusive means the range 
            includes the boundary number, exclusive means the range does not. 
            If the actual lower-bound of the value is negative-infinity and/or
            the actual upper bound of the value is positive-infinity, do not
            set a bound. 
          type: object
          not:  ## used to make 2 mins or 2 maxs not allowed
          ## means that instance is invalid if...
            anyOf:
            - type: object
              required: ## both mins are present
              - minExclusive
              - minInclusive 
            - type: object
              required: ## both maxs are present
              - maxExclusive
              - maxInclusive 
          additionalProperties: False
          properties:            
            minExclusive: 
              type: number
            maxExclusive:
              type: number
            minInclusive:
              type: number
            maxInclusive:
              type: number
        directionMeaning:
          description: >-
            Object (Python-dictionary-like). Each key specifies a direction 
            (larger, closer_to_zero, more_negative, etc.). Each value specifies
            what the direction means (more_specific, more_evidence, 
            more_confident, more_consistent, more_probable, etc.). One may want to 
            explain multiple directions (like when a value means something 
            different when closer to 0, closer to the upper bound, and closer to 
            the lower bound). 
          type: object
          additionalProperties: False
          patternProperties:
            .:
              type: string                    
        units: 
        ## assuming this is the same for all measure values...
          description: >-
            Units for the measure values. 
          type: string   
  oneCategoryMeasure:
#     Categorical measures have additional required info, like an enumeration of
#     the possible values. There may be an order to the category values. 
    allOf:
    - $ref: '#/definitions/generalMeasure'
    - type: object
      required:
      - categories
      ## don't set additionalProperties to False, will mess with allOf validation 
      properties:
        categories:
          description: >-
            List the possible values for the category, ordered if there is an
            order to the values. 
          type: array
          items:
            type: string
        directionMeaning:
          description: >-
            Object (Python-dict-like). The key is the way to read the categories 
            array above, forward or reverse. The value is what the direction means 
            (more_specific, more_evidence, more_confident, more_consistent, 
            more_probable, etc.). 
          type: object
          additionalProperties: False
          patternProperties:
            forward|reverse:
              type: string     
  ## CONTEXT DATA OBJECT
  contextObj:     
    description: >-
      Object (Python-dict-like). Keys specify the type of context. Values could 
      be static (not dependent on response), take on a specific value in the 
      API/JSON response, or tranformed from the value of a specific field in the 
      API/JSON response. Ideally, after processing, the final values will be 
      from ontologies (CURIE format) or will be short strings. 
      Context/relevance is information that restricts the use or 
      interpretation of this association. 
      This is sometimes necessary for querying or for knowing when the 
      retrieved association is relevant to the problem being addressed.     
    type: object
    additionalProperties: False
    patternProperties:
      ## cell line info counts as experimentalSpecific
      taxonSpecific|diseaseSpecific|cohortSpecific|experimentalSpecific:
      ## the value is an object fitting one of these schemas
        oneOf:
        - $ref: '#/definitions/staticValue'
        - $ref: '#/definitions/takesOnResponseValue'
        - $ref: '#/definitions/transformedFromResponseValue'
  ## PROVENANCE DATA OBJECTS
  oneProvenanceList:
    description: >-
      Array of objects (Python-list-of-dict-like). Lists the sources and info
      about them (including how they create associations). 
    type: array
    items:
      $ref: '#/definitions/oneProvenanceUnit'        
  oneProvenanceUnit:
    type: object
    required:
    - name
    - sourceType
    additionalProperties: False
    properties:
      name:
        description: >-
          Name of the knowledge-source/API/resource. In display format (source way of 
          capitalizing their name, with spaces). Include words like API or RDF at the
          end of the name if those access methods were used. 
        type: string
      sourceType:
        ## May eventually set as enum to require a set number of options                             
        description: >-
          Type of knowledge-source/API/resource. Current possible values include
          service, knowledgebase, publications, text, clinical_database. 
        type: string
      version:        
        description: >-
          Knowledge-source/API/resource version.
        type: string
      versionType:
        ## May eventually set as enum to require a set number of options                             
        description: >-
          There are different formats / ways of specifying what the version is. 
          Current possible values include date_last_updated, version_number, 
          data_from_this_date, latest_date_covered.
        type: string
      method:
        ## Ideally, very similar methods have the same values. The many 
        ##   possible options make it hard to make as an enum.        
        description: >-
          Keyword noting what the knowledge-source/API/resource did to
          build the association from data/knowledge. Current possible values 
          include ingest, NLP, manual_curation, shared_phenotype, shared_disease, 
          shared_variant, submission, orthology_mapping... 
        type: string
        ## manual_curation means people are trained to make these annotations 
        ##   (aka curators) and/or submissions are REVIEWED by curators before entering KB
        ## submission means people made these annotations but their work wasn't 
        ##   necessarily made or reviewed by curators 
      sourceReferences:
      ## put the publications/websites that have more info on how annotations were made
      ##  can be what was used to set/write method, descriptiveInfo, sourceContext...
        $ref: '#/definitions/referenceObj'  
      descriptiveInfo:      
        description: >-
          Free-text description of what the source did to create the associations.
          Try to include enough detail that a reader would truly understand what
          happened. 
        type: string        
      sourceContext:
        ## used ONLY when every association retrieved from this API is restricted 
        ##   in how it should be used or interpreted. 
        $ref: '#/definitions/contextObj'