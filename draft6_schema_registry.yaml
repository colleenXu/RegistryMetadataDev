## notes for developers:
##  use this to validate registry files
##  this schema has "$ref" that need to be expanded in use.
##    Python has the library jsonref that can be used for this. 
##  this schema MUST have the object/properties/nested-object/properties
##    structure (aka the properties keyword cannot be removed). When removed,
##    the validation will not work correctly. 
##  x-bte-association-retrieval can be a new metadata extension for now, so it 
##    doesn't break code dependent on the current x-bte-kgs-association 
##    extension
##  from Andrew Su: for now, require less. Don't require fields to be present
##    when they'll be empty in some situations
##  from Chunlei Wu: prefer x-bte-kgs-association-dev name to 
##    x-bte-association-retrieval rename CX is using
## this is 79 char long #######################################################

title: Schema for objects within x-bte-association-retrieval
$schema: 'http://json-schema.org/draft-07/schema#'
type: object
description: >-
  Describes the x-bte-association-retrieval metadata extension within SmartAPI
  registry files. Knowledge-provider (KP) APIs in the Translator ecosystem
  provide associations/edges between biomedical entities. This extension
  describes how to query these APIs and how to post-process their responses
  and associated metadata into a standard format. There may be multiple
  objects within the extension for different queries (with different input
  types, predicates, sources, or output types involved).
required:
- components
properties:
  components:
    type: object
    ## don't require this property since not all APIs will have this
    properties:
      x-bte-association-retrieval:
        type: object
        ## no naming format, but each operation must fit the sub-schema
        minProperties: 1
        ## if x-bte-association-retrieval is present, have at least one obj
        patternProperties:
          .:
            $ref: '#/definitions/oneAssociationRetrievalObj'
definitions:
  oneAssociationRetrievalObj:
    type: object
    required:
    - queryInfo
    - inputs
    - outputs
    - predicateInfo
    ## strongly recommended: provenance, references
    ## use as-needed: numericMeasures, categoryMeasures, contextRelevance
    additionalProperties: False
    properties:
      queryInfo:
        description: >- 
          Contains info on the query (API call) for this operation. The OpenAPI
          /paths/operations may have specific fields (like parameters,
          responseBody, etc.), and these can be set here
        type: object
        ## Andrew Su: if operation does not supportBatch, then this field
        ##   can be absent. It doesn't need to be required. 
        ## Kevin: can add simple field typing, but cannot require them 
        ## ?? set minProperties: 1? not sure
        properties:
          supportBatch:
            type: boolean
          inputSeparator:
            type: string
          parameters:
            type: object
          requestBody:
            type: object    
      ## ?? incorporate nodesConflated properties into inputs/outputs?
      inputs:
        description: >-
          Array of objects (Python list-of-dict-like). Describes valid inputs
          (biolink entity class, ID namespace, etc)
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/inputInfo'
      outputs:
        description: >-
          Array of objects (Python list-of-dict-like). Describes valid outputs
          (biolink entity class, ID namespace, etc) and their
          API/JSON-response field
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/outputInfo'
      ## WHAT the relationship is                    
      predicateInfo:
        type: object
        required:
          - biolink
        additionalProperties: False
        properties:
        ## biolink, id, label may be in the API/JSON-response or may not.
        ## Choose a schema to handle the situation 
          biolink:
          ## biolink predicate that best describes the association.
          ## similar to the biolink/TRAPI predicate 
            oneOf:
            - $ref: '#/definitions/staticValue'
            - $ref: '#/definitions/takesOnResponseValue'
            - $ref: '#/definitions/transformResponseValues'
          id:
          ## relation (OWL ObjectProperty) that best describes the 
          ## association. Curie format (prefix:ID). Assigned by Translator
          ## team member or found in the original data. Similar to the 
          ## biolink/TRAPI relation 
            oneOf:
            - $ref: '#/definitions/staticValue'
            - $ref: '#/definitions/takesOnResponseValue'
            - $ref: '#/definitions/transformResponseValues'
          label:
          ## Human-readable label for id field above. 
            oneOf:
            - $ref: '#/definitions/staticValue'
            - $ref: '#/definitions/takesOnResponseValue'
            - $ref: '#/definitions/transformResponseValues'
          nodesConflated:
          ## ?? incorporate into inputs/outputs fields
          ## currently assuming it is static and doesn't depend on response 
          ## BTE could use this to automatically pick Hint objects w/ 
          ##   MULTIPLE Biolink entity classes that match the input node
          ##   lookup string (before-query input node resolution) or the 
          ##   output node name (post-processing output node resolution)?
            description: >-
              Array of objects (Python list-of-dict-like). Used when the
              associations conflate the Biolink entity classes/node-types of
              the entities involved. For example, gene-disease associations
              often involve conflation of a gene with its altered gene product
            type: array
            minItems: 1
            items:
              $ref: '#/definitions/conflatedNode'  
      references:  ## optional, include when possible: important user need
      ## includes supporting publications and source websites 
      ##   showing the association
        $ref: '#/definitions/referenceObj'        
      ## WHERE the association and its related info come from, and HOW   
      provenance:
        oneOf:
        - $ref: '#/definitions/oneProvenanceList'  
          ## use if all associations come from the same sources
          ##   so provenance is basically static
        - $ref: '#/definitions/transformResponseValues' 
          ## use for complex situations where associations may come from
          ##   different sources. Values from the response often need to 
          ##   be mapped to a standard way of describing sources 
      ## MEASURES give INFO related to an association, can be EVIDENCE for it       
      numericMeasures:
        description: >-
          Array of objects (Python list-of-dict-like). Gives measure info and
          which API/JSON-response field to retrieve it from
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/oneNumericMeasure'        
      categoryMeasures:
        description: >-
          Array of objects (Python list-of-dict-like). Gives measure info and
          which API/JSON-response field to retrieve it from
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/oneCategoryMeasure'    
      ## WHERE and WHEN is this information valid/relevant
      contextRelevance:
        $ref: '#/definitions/contextObj'  
      ## may set up fields later for other info? like what was used for 
      ##   triangulation (variant for disease->gene), text-mining info, 
      ##   clinical-data/exposures info?
## this is 79 char long #######################################################
  ## DEFINITIONS for sub-schemas used in oneAssociationRetrievalObj              
  inputInfo:
    type: object
    required:
    - id
    - semantic
    additionalProperties: False
    properties:
      id:
        description: ID namespace prefix for the query input
        type: string
      semantic:
        description: Biolink entity class for the query input
        type: string
      requiresPrefix:
        description: >-
          Whether the API query expects curies (prefixed-IDs) or not
        type: boolean
        default: false
  outputInfo:
    type: object
    required:
    - id
    - semantic
    - responseField
    additionalProperties: False
    properties:
      id:
        description: ID namespace prefix for the query output
        type: string
      semantic:
        description: Biolink entity class for the query output
        type: string
      responseField:  
        description: >-
          Dot-notation for the field in API/JSON response that corresponds
          to the output ID(s)
        type: string
      containsPrefix:
        description: >-
          Whether the output values are curies (prefixed-IDs) or not
        type: boolean
        default: false
## this is 79 char long #######################################################
## some info we want to structure is in the API/JSON response; some isn't. 
## To handle this, most info fields must follow one of the following schemas:
## - staticValue: we set the info at the registry-level, 
##     not dependent on response 
## - takesOnResponseValue: info directly from the value in a specific field  
##     of the API/JSON response 
## - transformResponseValues: info is in one or more specific fields 
##     of the API/JSON response, but some parsing/transformation needs to 
##     be done to get it in the desired format. This can involve a file 
##     that maps response values to formatted data and code to do the 
##     parsing/mapping, OR just code that calls services to transform/parse
## - transformUsingTemplate: similar to transformResponseValues, but
##     a string template can be used to get the data in the desired format.
##     Uses a template, its replacement fields, and code to do the parsing.
##     Used to create website URLs. 
  staticValue:
    description: >-
      Info is not dependent on API/JSON-response. In this situation, a static
      value can be set in the registry using the value field
    type: object
    required:  
    - value
    additionalProperties: False
    properties:
      value: 
        oneOf:  ## string or array of strings
        - type: array
          minItems: 1
          items:
            type: string
        - type: string
  takesOnResponseValue:
    description: >-
      Info is dynamic and can be taken directly from the value in a specific
      field of the API/JSON response. In this situation, the registry points
      to the response field using dot-notation
    type: object
    required:
    - responseField   
    additionalProperties: False
    properties:
      responseField:  
        type: string  ## dot-notation API/JSON response field
  transformResponseValues:
    description: >-
      Info is dynamic but its value has to be mapped or transformed from
      one or more values/fields in the API/JSON response
    type: object
    required:
    - instructions
    - responseFieldsUsed
    - bteCode
    additionalProperties: False
    properties:
      instructions:
        description: >-
          Long-text description of what should be done to get info in the
          desired format using the other properties of this object.
          Also explains what the association property should look like after
          this post-processing
        type: string   
      responseFieldsUsed:
        description: >-
          dot-notation for the one or more fields in the API/JSON response
          used
        oneOf:  ## ALLOWS string (1 field) or array of strings (multiple)
        - type: array
          minItems: 1
          items:
            type: string
        - type: string
      mappingFile:
        description: >-
          github link to YAML file that maps possible values from the response
          fields (as string keys) to info in the desired format
        type: string     
      bteCode:
        description: >-
          github link to the code BTE uses to post-process API/JSON responses
          (using the info in other properties of this object)
        type: string     
  transformUsingTemplate:
    description: >-
      Info is dynamic but its value has to be made using a template one or
      more values/fields in the API/JSON response OR the query
    type: object
    required:
    - instructions
    - template
    - templateKeys
    - bteCode 
    additionalProperties: False
    properties:
      instructions:
        description: >-
          Long-text description of what should be done to get info in the
          desired format using the other properties of this object.
          Also explains what the association property should look like after
          this post-processing
        type: string   
      template:
        description: >-
          One string template (Python string-formatting-like).
          The keywords bracketed by curly brackets are replacement-fields
          that point to what they should be replaced with (see templateKeys)
        type: string   
      templateKeys:
        description: >-
          Object (Python dict-like). Keys are the keywords in the template;
          values are dot-notation for API/JSON response fields OR
          variable names for query/input info. That data should be used to
          replace the keywords in the template, creating one or more strings
        type: object  
        ## require one or more keys
        minProperties: 1
        patternProperties:
          .:
            type: string      
      bteCode:
        description: >-
          github link to the code BTE uses to post-process API/JSON responses
          (using the info in other properties of this object)
        type: string  
  conflatedNode:
    type: object
    required:
    - original
    - conflated  
    additionalProperties: False
    properties:
      original:
        description: >-
          The current Biolink entity class (aka node type) connected to this
          edge, which is being conflated with another Biolink entity class
        type: string
      conflated:
        description: >-
          The Biolink entity class (aka node type) that the association is
          rooted in from a biological point-of-view. For example, a
          gene-disease association may really be based on altered gene
          products and their activities. In this case, the original would be
          Gene and the conflated would be GeneProduct
        type: string
      where:
        description: >-
          Name of the source where this happened. Should match the name of a
          source described in the provenance field / provenance mapping file
        type: string  
  referenceObj:  
    description: >- 
      Used to provide publications and website URLs for users to learn more
      about an association, knowledge-source, measure, context/relevance, etc
    type: object
    additionalProperties: False
    minProperties: 1
    ## only have a referenceObj if you're going to provide info...
    properties: 
      publications:
        type: object
        ## only have a publications if you're going to provide info...
        minProperties: 1
        patternProperties:
        ## keys are ID namespace, all-lowercase. 
        ## Examples: pmid, pmc, doi, biorixv, medrxiv
          .:            
            oneOf:  ## values are static or come from the response             
            - type: object 
              ## same as staticValue sub-schema except it allows for numbers
              ##   since IDs are often automatically parsed as numbers...  
              required:  
              - value
              additionalProperties: False
              properties:
                value: 
                  oneOf:  
                  - type: array
                    minItems: 1
                    items:
                      type: [string, number]
                  - type: [string, number]
            - $ref: '#/definitions/takesOnResponseValue'
            - $ref: '#/definitions/transformResponseValues' 
      websites:
        oneOf:  ## value is static or can be made using a template
        - $ref: '#/definitions/staticValue'
        - $ref: '#/definitions/transformUsingTemplate'    
  ## PROVENANCE DATA OBJECTS
  oneProvenanceList:
    description: >-
      Array of objects (Python list-of-dict-like). Lists the sources and
      associated info (including how they create associations)
    type: array
    minItems: 1
    items:
      $ref: '#/definitions/oneProvenanceUnit'        
  oneProvenanceUnit:
    type: object
    required:
    - name
    - sourceType
    additionalProperties: False
    properties:
      name:
        description: >-
          Name of the source (KP API, knowledge-source, database, text
          corpus, etc)
        type: string
      sourceType:
        ## ?? set as enum (set options)                      
        description: >-
          Type of the source (KP API, knowledge-source, database, text
          corpus, etc). Current possible values include service,
          knowledgebase, publications, text, clinical_database
        type: string
      version:        
        description: >-
          Source version (KP API, knowledge-source, database, text corpus, etc)
        type: string
      versionType:
        ## ?? set as enum (set options)                      
        description: >-
          There are different formats for versioning. Current possible values
          include date_last_updated, version_number, data_from_this_date,
          latest_date_covered
        type: string
      method:
        ## Ideally, very similar methods have the same values. The many 
        ##   possible options make it hard to make as an enum. 
        ## Note that some sources won't have methods (like text corpus...)
        description: >-
          Keyword noting what the source did to create associations from data
          or knowledge. Current possible values include ingest, NLP,
          manual_curation, shared_phenotype, shared_disease, shared_variant,
          submission, orthology_mapping
        type: string
        ## manual_curation means people (aka curators) are trained to make 
        ##   these associations or the associations were REVIEWED by curators
        ## submission means people made the associations but their work wasn't 
        ##   necessarily made or reviewed by curators 
      sourceReferences:
      ## for publications/websites with info on how associations were made
      ## likely used to pick the sourceType/method/sourceContext and write
      ##   descriptiveInfo
        $ref: '#/definitions/referenceObj'  
      descriptiveInfo:      
        description: >-
          Long-text description of what the source did to create associations.
          Try to include enough detail that a reader would understand what
          happened
        type: string        
      sourceContext:
        ## used ONLY when every association retrieved from this operation
        ##   is restricted in how it should be used or interpreted. 
        $ref: '#/definitions/contextObj'        
## assumes a measure's values are in one API response/JSON response field. 
## therefore, schema similar to takesOnResponseValue, with some additional 
##   static measure info 
## oneNumericMeasure and oneCategoryMeasure build on the generalMeasure schema
  generalMeasure:
    type: object
    required:
    - name
    - responseField
    ## don't set additionalProperties to False, will mess with allOf later
    properties:
      name:
        description: >-
          Name of the measure (include the name of the resource that
          calculated it)
        type: string
      ontologyTerm:
        description: >-
          Term from an ontology (ideally an OWL Class) that corresponds with
          this measure. Format is prefix:ID
        type: string
      responseField:
        description: >-
          Dot-notation for the field in the API/JSON response corresponding to
          this measure
        type: string
      missingValueMeaning:
        description: >-
          Short free-text explaining what a missing/NULL/NA value would mean
        type: string
      measureReferences:  
      ## put publications/websites with more info on the measure here
        $ref: '#/definitions/referenceObj'     
  oneNumericMeasure:
  ## includes additional requirements, like range and direction info. 
  ##   Units may also be specified. 
    allOf:
    - $ref: '#/definitions/generalMeasure'      
    - type: object
      required:
      - directionMeaning
      ## don't set additionalProperties to False, will mess with allOf
      properties:
        range:
          ## do not set a range if a measure can take on any value 
          description: >-
            Object, Python dict-like. Defines an expected lower and/or upper
            bound for values (minimum and maximum). Inclusive means the range
            includes the boundary number; exclusive means the range does not.
            If the actual lower-bound is negative-infinity and/or the actual
            upper bound is positive-infinity, do not set a bound
          type: object
          not:  ## used to make 2 mins or 2 maxs not allowed
          ## means that instance is invalid if...
            anyOf:
            - type: object
              required: ## both mins are present
              - minExclusive
              - minInclusive 
            - type: object
              required: ## both maxs are present
              - maxExclusive
              - maxInclusive 
          additionalProperties: False
          minProperties: 1
          ## if you have a range, provide info...
          properties:            
            minExclusive: 
              type: number
            maxExclusive:
              type: number
            minInclusive:
              type: number
            maxInclusive:
              type: number
        directionMeaning:
          description: >-
            Object, Python dict-like. Each key is a direction (larger,
            closer_to_zero, more_negative, etc.). Each value is what the
            direction means (more_specific, more_evidence, more_confident,
            more_consistent, more_probable, etc.). A developer may want to
            explain multiple directions (e.g. when a value means something
            different when closer to 0 vs. closer to the upper bound vs.
            closer to the lower bound)
          type: object
          minProperties: 1
          ## needs to give at least something
          patternProperties:
            .:
              type: string                    
        units: 
        ## assuming this is the same for all measure values...
          description: Units for the measure values
          type: string   
  oneCategoryMeasure:
  ## includes additional requirements, like categories (enumerates possible
  ##   values) and direction info (if the possible values are ordered)
    allOf:
    - $ref: '#/definitions/generalMeasure'
    - type: object
      required:
      - categories
      ## don't set additionalProperties to False, will mess with allOf
      properties:
        categories:
          description: >-
            List of the possible values for the category, ordered if there
            is an order to the values
          type: array
          minItems: 1
          items:
            type: string
        directionMeaning:
          description: >-
            Object, Python dict-like. The key is the way to read the
            categories above, forward or reverse. The value is what the
            direction means (more_specific, more_evidence, more_confident,
            more_consistent, more_probable, etc)
          type: object
          additionalProperties: False
          minProperties: 1
          ## if you have a direction, provide info...
          patternProperties:
            forward|reverse:
              type: string  
  ## CONTEXT DATA OBJECT. 
  contextObj:     
    description: >-
      Object, Python dict-like. Keys specify the type of context. Values
      depend on where the information comes from. After post-processing, the
      context should be ontology terms (curies) or short-strings.
      Context/relevance is information that restricts the use or
      interpretation of this association. This lets a developer know if the
      operation or the associations retrieved are relevant to the question
      being asked
    type: object
    additionalProperties: False
    minProperties: 1
    ## if contextObj is present, require it to have some info inside
    patternProperties:
      ## cell line info counts as experimentalSpecific
      taxonSpecific|diseaseSpecific|cohortSpecific|experimentalSpecific:
      ## the value is an object fitting one of these schemas
        oneOf:
        - $ref: '#/definitions/staticValue'
        - $ref: '#/definitions/takesOnResponseValue'
        - $ref: '#/definitions/transformResponseValues'